@using BExIS.Modules.Sam.UI.Models
@using Telerik.Web.Mvc.UI
@model IEnumerable<FeatureTreeViewModel>

<style type="text/css">
    #TreeView_Features .t-minus {
        padding-top: 2px;
    }

    #TreeView_Features .t-item {
        padding-right: 0;
    }

    #TreeView_Features span:hover {
        font-weight: normal;
    }

    #TreeView_Features div {
        padding-left: 5px;
        padding-top: 2px;
        padding-bottom: 2px;
    }

        #TreeView_Features div span {
            max-width: 180px;
            padding-right: 0;
            white-space: nowrap !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
        }

        #TreeView_Features div:hover,
        #TreeView_Features .bx-selected,
        #TreeView_Features span.t-state-selected {
            background-color: #d2e8e3;
            font-weight: normal;
        }

    #TreeView_Features .t-item li {
        padding-top: 0;
        padding-bottom: 0;
        padding-left: 15px;
    }

    #TreeView_Features li {
        padding-left: 25px;
        padding-right: 0;
        overflow-x: hidden;
    }
</style>

@(Html.Telerik().TreeView()
      .Name("treeView_features")
      .ShowCheckBox(true)
      .BindTo(Model, mappings =>
      {
          mappings.For<FeatureTreeViewModel>(binding => binding

              .ItemDataBound((item, feature) =>
              {
                  item.Text = feature.FeatureName;
                  item.Value = feature.Id.ToString();
                  item.Checked = feature.IsPublic;
                  item.LinkHtmlAttributes["title"] = "Select " + feature.FeatureName + " to manage the corresponding feature permissions on the right.";
              })
              .Children(feature => feature.Children));
      })
      .ClientEvents(events => events
        .OnChecked("treeView_features_onChecked")
        .OnSelect("treeView_features_onSelect")
      )

      .ExpandAll(true)
)