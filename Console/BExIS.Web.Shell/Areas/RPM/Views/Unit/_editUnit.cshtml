@using Telerik.Web.Mvc.UI
@using System
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Dlm.Services.DataStructure
@model BExIS.Modules.Rpm.UI.Models.EditUnitModel

@{
    string DimDesc = "";
    string temp = "";
    HtmlString dimensionArray = new HtmlString(temp);

    int dimensionIndex = 0;

    if (Model.Unit.Dimension != null && Model.Unit.Dimension.Id > 0 && Model.DimensionList.Any())
    {
        Dimension dim = Model.DimensionList.Where(d => d.Id.Equals(Model.Unit.Dimension.Id)).FirstOrDefault();
        if (dim != null)
        {
            dimensionIndex = Model.DimensionList.IndexOf(dim);
        }
    }
}

@if(Model.Unit != null)
{   
    List<string> MeasurementSystemList = new List<string>();
    int MeasurementSystemIndex = 0;
    int count = 0;
    foreach (MeasurementSystem ms in Enum.GetValues(typeof(MeasurementSystem)))
    {
        MeasurementSystemList.Add(ms.ToString());
        if (ms == Model.Unit.MeasurementSystem)
        {
            MeasurementSystemIndex = count;
        }
        count++;
    }

    List<long> checkedIds = new List<long>();

    if (Session["checked"] != null)
    {
        checkedIds = (List<long>)Session["checked"];
    }
 
    List<long> dataTypeIds = new List<long>();
    
    foreach (DataType dt in Model.Unit.AssociatedDataTypes)
    {
        dataTypeIds.Add(dt.Id);
    }

            
<div class="planingPartialDiv" id="createUnit">

    @using (Html.BeginForm("editUnit", "Unit", new { area = "RPM" }))
    {
       @(Html.HiddenFor(m => Model.Unit.Id, new { @class = "hidden" })) 
        <table class="bx-rpm-info">
            <tr id="name">
                <td id="nameBox">
                    Name <span class="bx bx-required" title="Required"></span>
                </td>
                <td id = "Unit_input">
                    @(Html.TextBoxFor(m => Model.Unit.Name, new { @class = "t-input bx-input" , @autofocus = "autofocus", @tabindex = "1"}))
                </td>
                <td class="dimDesc"></td>
                <td class="bx-errorMsg">@Session["nameMsg"]</td>
            </tr>
            <tr>
                <td>
                    Abbreviation <span class="bx bx-required" title="Required"></span>
                </td>
                <td>
                    @(Html.TextBoxFor(m => Model.Unit.Abbreviation, new { @class = "t-input bx-input", @tabindex = "2"}))
                </td>
                <td class="dimDesc"></td>
                <td class="bx-errorMsg">@Session["abbrMsg"]</td>
            </tr>
            <tr>
                <td>
                    Description
                </td>
                <td>
                    @(Html.TextBoxFor(m => Model.Unit.Description, new { @class = "t-input bx-input", @tabindex = "3"}))
                </td>
                <td class="dimDesc"></td>
                <td class="bx-errorMsg"></td>
            </tr>
            <tr>
                <td>
                    Dimension Name <span class="bx bx-required" title="Required"></span>
                </td>
                <td>

                    

                    @(Html.Telerik().ComboBox()
                        .Name("Unit_Dimension_Name_ComboBox")
                        .Placeholder("Select or Enter")
                        .Filterable()
                        .HtmlAttributes(new { @class= "bx-dropdown" })
                        .Items(item =>
                        {
                            foreach (Dimension d in Model.DimensionList)
                            {
                                if (Model.Unit.Dimension.Id == d.Id)
                                {
                                    //item.Add().Text(d.Name.ToString() + " (" + d.Specification + ")").Value(d.Id.ToString()).Selected(true);
                                    item.Add().Text(d.Name.ToString()).Value(d.Id.ToString()).Selected(true);
                                    if (d.Description != null)
                                    {
                                        DimDesc = d.Description;
                                    }
                                }
                                else
                                {
                                    //item.Add().Text(d.Name.ToString() + " (" + d.Specification + ")").Value(d.Id.ToString());
                                    item.Add().Text(d.Name.ToString()).Value(d.Id.ToString());

                                }

                                if (temp == "" || temp == null)
                                {
                                    temp = "[" + d.Id + ",'" + d.Specification +"','" + d.Description + "']";
                                }
                                else
                                {
                                    temp = temp + ",[" + d.Id + ",'" + d.Specification + "','" + d.Description + "']";
                                }
                            }

                            if (Model.Unit.Dimension != null && !string.IsNullOrEmpty(Model.Unit.Dimension.Name))
                            {
                                item.Add().Text(Model.Unit.Dimension.Name.ToString()).Value(Model.Unit.Dimension.Id.ToString()).Selected(true);
                            }

                            dimensionArray = new HtmlString(temp);
                        })
                        .SelectedIndex(0)
                        .ClientEvents(e => e.OnChange("dimensionChange"))
                        )

                        @(Html.HiddenFor(m => Model.Unit.Dimension.Id, new { @class = "hidden" }))
                        @(Html.HiddenFor(m => Model.Unit.Dimension.Name, new { @class = "hidden" }))
                </td>
                <td id="Unit_Dimension_Description" class="dimDesc">@DimDesc</td>
                <td class="bx-errorMsg">@Session["dimensionMsg"]</td>
            </tr>
            <tr>
                <td>
                    Dimension Specification
                </td>
                <td>
                    @(Html.TextBoxFor(m => Model.Unit.Dimension.Specification, new { @class = "bx-input", @tabindex = "3", @placeholder = "L(0,0)M(0,0)T(0,0)I(0,0)?(0,0)N(0,0)J(0,0)"}))
                </td>
                <td></td>
                <td class="bx-errorMsg">@Session["dimensionSpecificationMsg"]</td>
            </tr>
            <tr>
                <td>
                    Measurement System
                </td>
                <td>
                    @(Html.Telerik().DropDownList()
                        .Name("measurementSystem")
                        .HtmlAttributes(new {@class = "bx-dropdown", @tabindex = 5})
                        .SelectedIndex(MeasurementSystemIndex)
                        .BindTo(new SelectList(MeasurementSystemList))
                    )
                </td>
                <td class="dimDesc"></td>
                <td class="bx-errorMsg"></td>
            </tr>
        </table>
            @(Html.Telerik().Grid(Model.DataTypeList)
            .Name("bx-rpm-selectDataTypeGrid")
            .Scrollable()
            //.Sortable()
            .Filterable()
            //.DataBinding(binding => binding.Ajax().OperationMode(GridOperationMode.Client))
            .Columns(columns =>
            {
            columns.Template(
                @<text>
                    <input class="checkBox" name="checkedRecords" type="checkbox" value="@item.Id " title="checkedRecords" tabindex="5"
                           @if (dataTypeIds.Contains(item.Id) || checkedIds.Contains(item.Id)) { <text> checked="checked" </text>  } />
                </text>)
                    .Title("").Width(36).HtmlAttributes(new { style = "text-align:center" });
                columns.Bound(c => c.Id)
                .Width(100);
                columns.Bound(c => c.Name);
                columns.Bound(c => c.SystemType);
                columns.Bound(c => c.Description);
            })
                .ClientEvents(events => events.OnDataBound("onDataBound"))
            )
                    <div class="bx-errorMsg bx-rpm-functions">
                        @Session["dataTypeMsg"]
                    </div>
                    <div class="bx-rpm-submit bx-rpm-buttons">
                        <button name="create" value="create" type="submit" class="bx-button action" id="saveButton" title="Save The Unit" tabindex="6">Save</button>
                        @Html.ActionLink("Cancel", "UnitManager", "Unit", new { area = "RPM", @class = "bx-button action", @title = "Cancel", @tabindex = "7" })
                    </div>
                    }

</div>
}
else
{
 <span class="bx-errorMsg">Can't edit Unit doesn't exist anymore.</span>
}
    

<script type="text/javascript">

    function onDataBound()
    {
        addTooltips();
    }

    $(document).ready(function () {
        console.log("document ready")
        dimensionChange();
    })

    function dimensionChange()
    {
        console.log("on change")

        var temp = $("#Unit_Dimension_Name_ComboBox").val();
        if (isNaN(parseInt(temp)))
        {
            temp = 0;
        }

        $('#Unit_Dimension_Id').val(temp);
        $('#Unit_Dimension_Name').val($("#Unit_Dimension_Name_ComboBox-input").val());

        if (temp != 0) {

            var dimensionArray = [@dimensionArray];

            for (var i = 0; i < dimensionArray.length; i++) {
                if (dimensionArray[i][0] == temp) {
                    $('#Unit_Dimension_Specification').val(dimensionArray[i][1]);
                    $('#Unit_Dimension_Specification').prop('disabled', true);
                    if (dimensionArray[i][2] != "" && dimensionArray[i][2] != null) {
                        $('#Unit_Dimension_Description').text('for example ' + dimensionArray[i][2]);
                    }
                    else
                    {
                        $('#Unit_Dimension_Description').text('');
                    }
                }
            }
        }
        else {

            console.log($('#Unit_Dimension_Name').val());
            console.log($('#Unit_Dimension_Name_ComboBox-input').val());

            $('#Unit_Dimension_Specification').val('@Model.Unit.Dimension.Specification');
            $('#Unit_Dimension_Specification').prop('disabled', false);
            $('#Unit_Dimension_Description').text('');
        }
    }

    $('.checkBox').change(function () {
        if ($(this).attr('checked'))
            $(this).attr('checked', true);
        else
            $(this).removeAttr('checked');

        var checked;

        $('.checkBox').each(function () {
            if ($(this).attr('checked')) {
                if (checked)
                    checked += "," + $(this).attr('value');
                else
                    checked = $(this).attr('value');
            }
        });
        var checkedIDs = checked.split(',');
        var data = { checkedIDs: checkedIDs };

        $.ajax({
            url: '/RPM/Unit/setChecked',
            type: 'POST',
            data: JSON.stringify(data),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                //alert('Error: ' + xhr.statusText);
            },
            success: function (result) {
                //alert("success");
            },
            async: true,
            processData: false
        });
    });
</script>