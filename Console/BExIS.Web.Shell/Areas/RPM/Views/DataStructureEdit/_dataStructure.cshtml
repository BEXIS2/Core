@using Telerik.Web.Mvc.UI
@using BExIS.Modules.Rpm.UI.Models
@model BExIS.Modules.Rpm.UI.Models.DataStructurePreviewModel

<div class="bx-rpm-dataStructure-container">
    <div class="bx-rpm-datastructureheader">
        <h2 id="dataStructureName">@Model.Name (@Model.Id)</h2>
        @Html.Hidden("id", Model.Id, new { @id = "id" })
        <table>
            <tr class="name">
                <td class="bx-rpm-label"><label>Name</label></td>
                <td class="bx-rpm-text">
                    @Html.TextBox("name", Model.Name, new { @class = "bx-input", @placeholder = "Data Structure Name" })
                    <div class="hidden bx-rpm-error" id="messageContainer"><span id="message" class="bx-rpm-message" value="none"></span></div>
                </td>
            </tr>
            <tr class="description">
                <td class="bx-rpm-label"><label>Description</label></td>
                <td class="bx-rpm-text">@Html.TextArea("description", Model.Description, new { @class = "bx-input", @placeholder = "Data Structure Description" })</td>
            </tr>
        </table>
    </div>
    <div class="bx-rpm-scrollup bx t-arrow-up"/>
    <div class="bx-rpm-variable-container" id="variableContainer">     
        <div class="bx-rpm-variable-drag-drop">
            @if (Model.VariablePreviews != null && Model.VariablePreviews.Count > 0)
            {
                foreach (VariablePreviewStruct v in Model.VariablePreviews)
                {
                    @Html.Partial("_variableElement", v)
                }
            }
        </div>
    </div>
    <div class="bx-rpm-scrolldown bx t-arrow-down"/>
    <table class="bx-rpm-dataStructure-functions bx-footer left">
        <tr>
            <td>
                @if (Model.VariablePreviews != null && Model.VariablePreviews.Count > 0)
                {
                    @Html.ActionLink("Download Excel Template", "downloadTemplate", "DataStructureIO", new { @id = Model.Id }, new { area = "RPM", @class = "bx-button action", @id = "downloadButton" })
                    <button class="bx-button action bx-disabled hidden" id="disableddownloadButton" disabled="disabled">Download Excel Template</button>
                }
                else
                {
                    @Html.ActionLink("Download Excel Template", "downloadTemplate", "DataStructureIO", new { @id = Model.Id }, new { area = "RPM", @class = "bx-button action hidden", @id = "downloadButton" })
                    <button class="bx-button action bx-disabled" id="disableddownloadButton" disabled="disabled">Download Excel Template</button>
                }
                @if (Model.inUse)
                {
                    <button class="bx-button action bx-disabled" id="deleteButton" disabled="disabled" title="Can't delete Data Struture, it's used by a Dataset">Delete</button>
                }
                else
                {
                    <button class="bx-button action" id="deleteButton" onclick="javascript:openDelWindow(@Model.Id,'', 'datastructure')">Delete</button>
                }
                <button class="hidden" id="storeVariablesButton" value="@Model.Id">Store Variables</button>
                <button class="hidden" id="addVariableButton" value="0,''">Add Variable</button>
            </td>
            <td class="bx-footer right">
                <button class="bx-button action" id="saveButton">Save</button>
                <button class="bx-button action" id="saveAsButton" title="Creates a full editable Copy of the Data Structure">Save as</button>
                @Html.ActionLink("Cancel", "Index", "DataStructureSearch", new { DataStructureId = Model.Id }, new { area = "RPM", @class = "bx-button action", @title = "Cancel" })
            </td>
        </tr>
    </table>
</div>

<script type="text/javascript">
    var messageCheck = false;
    var dataStruktureInUse = @Model.inUse.ToString().ToLower();
    var startpos = 0;
    var speed = 5, timer;
    var offsetX = 0;
    var offsetY = 0;
    var elemWidth = 0;
    var moved = false;
    var changed = false;

    $(function () {
        resizeVariableContainer(120);
        initPackery();
        addTooltips();
        setFocus();

        if(dataStruktureInUse){
            lock();
        }

        $( ".bx-rpm-datastructureheader input" ).change(function() {
            changed = true;
        });

        $( ".bx-rpm-datastructureheader textarea" ).change(function() {
            changed = true;
        });
    });

    function lock(){
        $('.bx-rpm-variable-item .bx-rpm-text input').attr('disabled','true');
        $('.bx-rpm-variable-item .bx-rpm-text input').addClass('bx-disabled');
        $('.bx-rpm-variable-item .bx-rpm-text input').attr('title',"Can't edit Variable, Data Structure is used by a Dataset");
        disableAllDropdown();
        $('.bx-rpm-variable-item .bx-rpm-text .bx-rpm-option').attr('title',"Can't edit Variable, Data Structure is used by a Dataset");
        $('.bx-rpm-variable-item .bx-rpm-delete').attr('disabled','true');
        $('.bx-rpm-variable-item .bx-rpm-delete').addClass('bx-disabled');
        $('.bx-rpm-variable-item .bx-rpm-delete').attr('title',"Can't delete Variable Data, Structure is used by a Dataset");
        $('.bx-rpm-attribute-item .bx-rpm-select').attr('disabled','true');
        $('.bx-rpm-attribute-item .bx-rpm-select').addClass('bx-disabled');
        $('.bx-rpm-attribute-item .bx-rpm-select span').attr('disabled','true');
        $('.bx-rpm-attribute-item .bx-rpm-select span').addClass('bx-disabled');
        $('.bx-rpm-attribute-item .bx-rpm-select').attr('title',"Can't add Variable Data, Structure is used by a Dataset");
    }

    function setFocus(){
        $( ".bx-rpm-variable-item input" ).focusin(function() {
            var temp = $(this).val();
            $(this).val('');
            $(this).val(temp);
        });

        $( ".bx-rpm-variable-item textarea" ).focusin(function() {
            var temp = $(this).val();
            $(this).val('');
            $(this).val(temp);
        });

        $( ".bx-rpm-variable-item input" ).dblclick(function() {
            $(this).select();
        });

        $( ".bx-rpm-variable-item textarea" ).dblclick(function() {
            $(this).select();
        });

        $( ".bx-rpm-variable-item input" ).change(function() {
            changed = true;
        });

        $( ".bx-rpm-variable-item textarea" ).change(function() {
            changed = true;
        });
    }

    function initPackery() {
        var $variableGrid = $('.bx-rpm-variable-drag-drop').packery({
            itemSelector: '.bx-rpm-variable-item',
            transitionDuration: '0.5s',
            columnWidth: 100,
        });

        if(!dataStruktureInUse){
            $variableGrid.find('.bx-rpm-variable-item').each(function (i, item) {
                $variableGrid.packery('bindDraggabillyEvents', new Draggabilly( item ));
            });

            $('.bx-rpm-variable-drag-drop').mousedown(function(e){
                if($('.bx-rpm-variable-item.is-pointer-down').length > 0){
                    offsetX = e.pageX  - (parseInt($('.bx-rpm-variable-item.is-pointer-down').position().left) + parseInt($('.bx-rpm-variable-drag-drop').position().left) + 4);
                    offsetY = -2;
                    moved = false;
                    elemWidth = $('.bx-rpm-variable-drag-drop').innerWidth() - 18;
                    var div = $('#variableContainer');
                    startpos = div.scrollTop();
                }
            });

            $(window).mousemove( function(e) {
                if($('.bx-rpm-variable-item.is-dragging').length > 0){
                    $('.bx-rpm-variable-item.is-dragging').offset({
                        top: e.pageY - offsetY,
                        left: e.pageX - offsetX
                    });
                    $('.bx-rpm-variable-item.is-dragging').css({'position': 'fixed'});
                    if(!moved){
                        moved = true;
                        $('.bx-rpm-variable-item.is-dragging').width(elemWidth);
                        closeAllDropdown();          
                    }
                }
            });

            $(window).mouseup(function(e){
                offsetX = 0;
                offsetY = 0;
                moved = false;
                $('.bx-rpm-variable-item').width('');
                $('.bx-rpm-variable-item').css({'position': 'absolute'});
                var div = $('#variableContainer');
                startpos = div.scrollTop();
                $variableGrid.packery('layout');            
            });

            $('#variableContainer').scroll(function (e){
                var div = $('#variableContainer');
                var pos = div.scrollTop();
                if(pos > $('.bx-rpm-variable-drag-drop').height()-$('#variableContainer').height()){
                    div.scrollTop($('.bx-rpm-variable-drag-drop').height()-$('#variableContainer').height());
                }
                $variableGrid.packery('setScrollOffset', 0, startpos - pos);
                closeAllDropdown();
            });

            $(".bx-rpm-scrollup").hover(function (e) {
                var div = $('#variableContainer');
                $('.bx-rpm-variable-item select').blur();
                (function startscrolling(){
                    timer = setTimeout(function () {
                        var pos = div.scrollTop();
                        if(pos > 0){
                            div.scrollTop(pos -= speed);
                            if(speed < 30)
                                speed++;
                            startscrolling();
                        }
                    }, 100);
                })();
            },
            function () {
                clearTimeout(timer);
                var speed = 5;
            });

            $(".bx-rpm-scrolldown").hover(function () {
                var div = $('#variableContainer');
                $('.bx-rpm-variable-item select').blur();
                (function startscrolling(){
                    timer = setTimeout(function () {
                        var pos = div.scrollTop();
                        if(pos < $('.bx-rpm-variable-drag-drop').height()-div.height()){
                            div.scrollTop(pos += speed);
                            if(speed < 30)
                                speed++;
                            startscrolling();
                        }
                    }, 100);
                })();
            },
            function () {
                clearTimeout(timer);
                var speed = 5;
            });

            $('.bx-rpm-dataStructure-functions #addVariableButton').on('click', function () {
                var value = $(this).attr('value').split(',')
                var attrId = value[0];
                var variableName = '';
                for(var i = 1; i < value.length; i++){
                    if(i < value.length-1)
                        variableName += value[i] + ',';
                    else
                        variableName += value[i];
                }

                var parameters = encodeURI('/?attributeId=' + attrId + '&variableName=' + encodeURIComponent(variableName));
                $.get('@Url.Action("_getVariableElement", "DataStructureEdit", new { area = "RPM" } )' + parameters, function (data) {
                    if ($(data).hasClass('bx-rpm-message')) {
                        createMessageWindow(data, 'Add Variable ' + variableName + ' (' + attrId + ')', 'dataattribure', attrId);
                    }
                    else {
                        var $item = $(data)
                        var elems = $variableGrid.packery('getItemElements');
                        var attrName = $item.find('#varlabel').val();
                        var variableName = $item.find('#varlabel').val();
                        var isDuplicate = false;
                        var count = 0;
                        do {
                            isDuplicate = false;
                            count++;
                            for (var i in elems) {
                                if (variableName.toLowerCase() == $(elems[i]).find('#varlabel').val().toLowerCase()) {
                                    variableName = attrName + ' (' + count + ')';
                                    isDuplicate = true;
                                }
                            }
                        } while (isDuplicate)
                        $item.find('#varunit').val($item.find('#varunit').attr('value'));
                        $item.find('#varlabel').val(variableName);
                        $variableGrid.append($item).packery('appended', $item);
                        var elem = $variableGrid.find($item)[0];
                        $variableGrid.packery('bindDraggabillyEvents', new Draggabilly(elem));
                    }
                    $variableGrid.packery('layout');
                    setFocus();
                    scrollDown($('#variableContainer'), $('.bx-rpm-variable-drag-drop'));
                });
            });

            $variableGrid.on('click', '.bx-rpm-variable-item #deletevariable', function () {
                var variableElement = $(this).parents('.bx-rpm-variable-item');
                $variableGrid.packery('remove', variableElement);
                $variableGrid.packery('layout');
            });

            $variableGrid.on('click', '.bx-rpm-variable-item .bx-rpm-missing-value #addmissingvalue', function () {
                var missingValueContainer = $(this).parents('.bx-rpm-variable-item').find('.bx-rpm-missing-value-container');
                console.log(missingValueContainer);
                $.get('@Url.Action("_getMissingValueElement", "DataStructureEdit", new { area = "RPM" } )', function (data) {
                    missingValueContainer.append(data);
                    $variableGrid.packery('layout');
                });   
            });

            $variableGrid.on('click', '.bx-rpm-variable-item .bx-rpm-missing-value-item #deletemissingvalue', function () {
                var missingValueElement = $(this).parents('.bx-rpm-missing-value-item');
                missingValueElement.remove();
                $variableGrid.packery('layout');
            });
        }

        $variableGrid.on('click', '.bx-rpm-variable-item #variablecollapse', function () {
            var variableElement = $(this).parents('.bx-rpm-variable-item');
            var hiddenElements = variableElement.find('.hiddenelements');
            if (hiddenElements.hasClass('hidden')) {
                $(this).removeClass('bx-angle-double-down');
                $(this).addClass('bx-angle-double-up');
            }
            else {
                $(this).removeClass('bx-angle-double-up');
                $(this).addClass('bx-angle-double-down');
            }

            hiddenElements.toggleClass('hidden');
            $variableGrid.packery('layout');
        });

        $variableGrid.on('layoutComplete', orderItems);
        $variableGrid.on('dragItemPositioned', orderItems);

        function orderItems() {
            var elems = $variableGrid.packery('getItemElements');
            for (var i = 0; i < elems.length; i++) {
                var elem = $(elems[i]).find('.column .bx-rpm-text');
                elem.text(i + 1);
            }
        }
          

        $('.bx-rpm-dataStructure-functions #storeVariablesButton').on('click', function () {           
            storeVariables($('.bx-rpm-dataStructure-functions #storeVariablesButton').attr('value'), true);
            window.location.href = "/RPM/DataStructureEdit?dataStructureId=" + $('.bx-rpm-dataStructure-functions #storeVariablesButton').attr('value');
        });

        $('.bx-rpm-dataStructure-functions #saveButton').on('click', function () {
            $('.bx-rpm-error').addClass('hidden');
            validateName('message');
            var mvcheck = checkMissingValueDuplicates();
            var vcheck = checkDuplicates();
            if (vcheck && mvcheck){
                var cssId = 'message';
                var parameters = encodeURI('/?Id=' + $('.bx-rpm-datastructureheader #id').val() + '&Name=' + encodeURIComponent($('.bx-rpm-datastructureheader #name').val()) + '&Description=' + encodeURIComponent($('.bx-rpm-datastructureheader #description').val()) + '&isStructured=true&cssId=' + cssId + '&inUse=' + dataStruktureInUse);
                $.get('@Url.Action("createDataStructure", "DataStructureSearch", new { area = "RPM"} )' + parameters, function (data) {
                    if ($(data).hasClass('bx-rpm-message')) {
                        if($(data).attr('id') == cssId){
                            $(data).replaceAll('.bx-rpm-datastructureheader #' + $(data).attr('id'));
                            
                            var title = "Save Data Structure " + $('.bx-rpm-datastructureheader #name').val() + " ("+ $('.bx-rpm-datastructureheader #id').val() +")";
                            var message = "Can't save Data Structure because a Data tructure with same Name already exists.";
                            parameters = '/?message=' + encodeURIComponent(message) + '&hasMessage=true&cssId=warning';
                            $.get('@Url.Action("getMessageWindow", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
                                createMessageWindow(data ,title);
                                $variableGrid.packery('layout');
                            });
                            showmessage();
                        }
                        else if($(data).attr('id') == '0') {
                            saveAs($('.bx-rpm-datastructureheader #name').val(), $('.bx-rpm-datastructureheader #description').val());
                        }
                        else if($(data).attr('id') == 'inUse') {
                            lock();
                            if(!dataStruktureInUse) {
                                openCopyWindow($('.bx-rpm-datastructureheader #id').val(), $('.bx-rpm-datastructureheader #name').val(), $('.bx-rpm-datastructureheader #description').val(), true, true, true, data);
                            }
                            else {
                                storeVariables($(data).text());
                            }

                        }
                        else {
                            storeVariables($(data).text());                                   
                        }

                    }
                });
            }
            else {
                dublicateMessage(vcheck, mvcheck);
            }
        });

        function dublicateMessage(vcheck, mvcheck) {
            if (!vcheck || !mvcheck) {
                var title = "Save Data Structure " + $('.bx-rpm-datastructureheader #name').val() + " (" + $('.bx-rpm-datastructureheader #id').val() + ")";
                var message = "Can't save Data Structure " + $('.bx-rpm-datastructureheader #name').val() +"\n";

                if (!vcheck) {
                    message = message + "duplicate Variable Names\n";
                }
                if (!mvcheck) {
                    message = message + "duplicate Missing Value Names\n";
                }
                parameters = '/?message=' + encodeURIComponent(message) + '&hasMessage=true&cssId=warning';
                $.get('@Url.Action("getMessageWindow", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
                    createMessageWindow(data, title);
                    $variableGrid.packery('layout');
                });
            }
        }

        $('.bx-rpm-dataStructure-functions #saveAsButton').on('click', function () {
            saveAs($('.bx-rpm-datastructureheader #name').val(), $('.bx-rpm-datastructureheader #description').val());
        });

        function saveAs(name, description) {
            $('.bx-rpm-error').addClass('hidden');
            validateName('message');
            var mvcheck = checkMissingValueDuplicates();
            var vcheck = checkDuplicates();
            if (vcheck && mvcheck) {
                var cssId = 'message';
                parameters = '/?Id=0&Name=' + encodeURIComponent(name) + '&Description=' + encodeURIComponent(description) + '&isStructured=true&cssId=' + cssId + '&inUse=' + dataStruktureInUse;
                $.get('@Url.Action("createDataStructure", "DataStructureSearch", new { area = "RPM"} )' + parameters, function (data) {
                    if ($(data).hasClass('bx-rpm-message') && $(data).attr('id') == cssId) {
                        openCopyWindow($('.bx-rpm-datastructureheader #id').val(), $('.bx-rpm-datastructureheader #name').val(), $('.bx-rpm-datastructureheader #description').val(), true, true, true, data);
                    }
                    else if ($(data).hasClass('bx-rpm-message') && $(data).attr('id') == 'redirect') {
                        var elems = $variableGrid.packery('getItemElements');
                        for (var i = 0; i < elems.length; i++) {

                            var mvElems = $(elems[i]).find('.bx-rpm-missing-value-item');

                            for (var j = 0; j < mvElems.length; j++) {
                                $(mvElems[j]).find('#mvid').text('0');
                            }

                            $(elems[i]).find('#varid').text('0');
                        }
                        storeVariables($(data).text(), true);
                    }
                });
            }
            else {
                dublicateMessage(vcheck, mvcheck);
            }
        }

        function storeVariables(id, reload) {
            var elems = $variableGrid.packery('getItemElements');
            var variables = [];
            for (var i = 0; i < elems.length; i++) {

                var mvElems = $(elems[i]).find('.bx-rpm-missing-value-item');
                var missingValues = []

                for (var j = 0; j < mvElems.length; j++) {
                    missingValues.push({
                        Id: $(mvElems[j]).find('#mvid').text(),
                        DisplayName: $(mvElems[j]).find('#mvlabel').val(),
                        Description: $(mvElems[j]).find('#mvdescription').val(),
                        Placeholder: $(mvElems[j]).find('#mvplaceholderl').text(),
                    });
                }

                console.log($(elems[i]).find('#varid').text());

                var variable = {
                    Id: $(elems[i]).find('#varid').text(),
                    AttributeId: $(elems[i]).find('#attrid').text(),
                    Lable: $(elems[i]).find('#varlabel').val(),
                    Description: $(elems[i]).find('#vardescription').val(),
                    UnitId: $(elems[i]).find('#varunit').val(),
                    isOptional: $(elems[i]).find('#varisotional').is(':checked'),
                    MissingValues: missingValues,
                };
                variables.push(variable);
            }

            $('#DataStructure .bx-rpm-variable-drag-drop').html(
                '<h3 style="position: absolute; left: 0px; top: '+ ($('#variableContainer').scrollTop()+$('#variableContainer').height()/2) +'px;" class="bx-rpm-loading"><span class="fa fa-spinner fa-pulse"></span> Saving Data Structure<span>' + id + '</span></h3>'
            );

            variables = { variables: variables };

            $.ajax({
                url: '/RPM/DataStructureEdit/storeVariables/?Id=' + id,
                type: 'POST',
                data: JSON.stringify(variables),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    loadVariables(id);
                },
                success: function (result) {
                    if (result.hasMessage) {
                        parameters = '/?message=' + encodeURIComponent(result.Message) + '&hasMessage=' + result.hasMessage + '&cssId=' + result.CssId;
                        $.get('@Url.Action("getMessageWindow", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
                            createMessageWindow(data,'Store Variables');
                        });
                    }
                    changed = false;
                    if (!reload || reload == false) {
                        loadVariables(id);
                    }
                    else{
                        window.location.href = "/RPM/DataStructureEdit?dataStructureId=" + id;
                    }
                },
                async: false,
                processData: false
            });
        }


        function loadVariables(id){
            $.get('@Url.Action("_dataStructureBinding", "DataStructureEdit", new { area = "RPM" } )' + "/?dataStructureId=" + id, function (data) {
                $('#DataStructure .bx-rpm-datastructureheader').html($(data).find('.bx-rpm-datastructureheader').html());
                $('#DataStructure .bx-rpm-variable-drag-drop').html('');

                var elems = $variableGrid.packery('getItemElements');
                for (var i = 0; i < elems.length; i++) {
                    $variableGrid.packery('remove', $(elems[i]));
                }
                $(data).find('.bx-rpm-variable-item').each(function (i, $item) {
                    $variableGrid.append($item).packery('appended', $item)
                    $variableGrid.packery('bindDraggabillyEvents', new Draggabilly($item));
                });
                $variableGrid.packery('layout');
                setFocus();
                elems = $variableGrid.packery('getItemElements');
                if (elems.length > 0) {
                    $('#downloadButton').removeClass('hidden');
                    $('#disableddownloadButton').addClass('hidden');
                }
                else if (elems.length == 0) {
                    $('#downloadButton').addClass('hidden');
                    $('#disableddownloadButton').removeClass('hidden');
                }
                if(dataStruktureInUse){
                    lock();
                }

            });
        }

        function checkDuplicates() {
            var elems = $variableGrid.packery('getItemElements');
            var check = true;
            for (var i = 0; i < elems.length; i++) {
                for (var j = 0; j < elems.length; j++){
                    if(i != j && $(elems[i]).find('#varlabel').val().trim() == $(elems[j]).find('#varlabel').val().trim()){
                        $(elems[i]).find('.bx-rpm-error').removeClass('hidden');
                        $(elems[i]).find('.bx-rpm-message').text('Variable Name must be unique. Duplicate Variable ' + $(elems[j]).find('#varid').text());
                        check = false;
                        $variableGrid.packery('layout');
                    }
                }
            }
            return check;
        }

        function checkMissingValueDuplicates() {
            var elems = $variableGrid.packery('getItemElements');
            var check = true;
            for (var i = 0; i < elems.length; i++) {
                var missingvalues = $(elems[i]).find('.bx-rpm-missing-value-item');
                for (var j = 0; j < missingvalues.length; j++) {
                    for (var k = 0; k < missingvalues.length; k++) {
                        if (j != k && $(missingvalues[j]).find('#mvlabel').val().trim() == $(missingvalues[k]).find('#mvlabel').val().trim()) {
                            $('.bx-rpm-missing-value-container .bx-rpm-error#' + $(missingvalues[j]).find('#mvid').text()).removeClass('hidden');
                            $('.bx-rpm-missing-value-container .bx-rpm-error#' + $(missingvalues[j]).find('#mvid').text()).find('.bx-rpm-message').text('Missing Value Name must be unique. Missing Value ' + $(missingvalues[k]).find('#mvid').text());                     
                            check = false;
                            $(elems[i]).find('.hiddenelements').removeClass('hidden');
                            $variableGrid.packery('layout');
                        }
                    }

                }
            }
            return check;
        }
        $variableGrid.packery('layout');
    }

    $(window).resize(function () {
        resizeVariableContainer(120)
    });

    function resizeVariableContainer(delay) {
        setTimeout(function () {
            closeAllDropdown();
            $('.bx-rpm-variable-container').height(getVariableContainerSize());
            var width = $('.bx-rpm-datastructureheader').outerWidth() - $($('.bx-rpm-datastructureheader .bx-rpm-label')[0]).outerWidth() - ($('.bx-rpm-datastructureheader input').outerWidth() - $('.bx-rpm-datastructureheader input').width());
            $('.bx-rpm-datastructureheader input').attr('style', 'width:' + width + 'px; max-width:' + width + 'px;');
            $('.bx-rpm-datastructureheader textarea').attr('style', 'width:' + width + 'px; max-width:' + width + 'px;');       
        }, delay);
    }

    function getVariableContainerSize() {
        return $(window).height() - $('.navbar').outerHeight() - $('.bx-rpm-datastructureheader').outerHeight() - $('.bx-rpm-dataStructure-functions').outerHeight() - $('.bx-rpm-dataStructure-container .bx-rpm-scrollup').outerHeight() - $('.bx-rpm-dataStructure-container .bx-rpm-scrolldown').outerHeight() - $('#footer').outerHeight() - heightX;
    }

    function openDelWindow(id, name, type) {
        if (name && name != '')
            name = decodeURIComponent(name) + ' (' + id + ')';
        else
            name = $('#dataStructureName').text();
        var parameters = encodeURI('/?Id=' + id);
        $.ajax({
            type: 'GET',
            url: '@Url.Action("_deleteDataStructureBinding", "DataStructureSearch")' + parameters,
            dataType: 'html',
            success: function (data) {
                createMessageWindow(data,'Delete DataStructure ' + name, type, id);
            }
        });
    }

    //$('.bx-rpm-datastructureheader #name').keyup(function () {
    //    validateName('message');
    //});

    //$('.bx-rpm-datastructureheader #name').change(function () {
    //    validateName('message');
    //});

    function validateName(id) {
        var parameters = encodeURI('/?Id=' + $('.bx-rpm-datastructureheader #id').val() + '&Name=' + encodeURIComponent($('.bx-rpm-datastructureheader #name').val()) + '&cssId=' + id);
        $.get('@Url.Action("_validateDataStructureName", "DataStructureSearch", new { area = "RPM"} )' + parameters, function (data) {
            $(data).replaceAll('.bx-rpm-datastructureheader #' + id);
            showmessage();
        });
    }

    function showmessage() {
        var hasMessage = false;
        for (var i = 0; i < $('.bx-rpm-datastructureheader .bx-rpm-message').length; i++) {
            if ($('.bx-rpm-datastructureheader .bx-rpm-message')[i].getAttribute('value').toLowerCase() == 'true') {
                hasMessage = true;
                break;
            }
            if ($('.bx-rpm-datastructureheader .bx-rpm-message')[i].getAttribute('value').toLowerCase() == 'none') {
                hasMessage = 'none';
                break;
            }
        }
        if (hasMessage == true) {
            //$('.bx-rpm-dataStructure-functions #saveButton').attr('disabled', 'disabled');
            $(".bx-rpm-datastructureheader #messageContainer").removeClass('hidden');
            //$('.bx-rpm-dataStructure-functions #saveButton').addClass('bx-disabled');
        }
        else if(hasMessage == false){
            //$('.bx-rpm-dataStructure-functions #saveButton').removeAttr('disabled');
            $(".bx-rpm-datastructureheader #messageContainer").addClass('hidden');
            //$('.bx-rpm-dataStructure-functions #saveButton').removeClass('bx-disabled');
        }
        if (messageCheck != hasMessage) {
            messageCheck = hasMessage;
            resizeVariableContainer(120);
        }
    }

    function openCopyWindow(Id, Name, Description, isSructured, dataStruktureInUse, copy, message) {
        console.log(copy);
        console.log(Id);
        var title = "Save Data Structure " + Name + " ("+ $('.bx-rpm-datastructureheader #id').val() +") as";
        var parameters = encodeURI('/?Id=' + Id + '&Name=' + encodeURIComponent(Name) + '&Description=' + encodeURIComponent(Description) + '&isSructured=' + isSructured + '&inUse=' + dataStruktureInUse + '&copy=' + copy);
        $.ajax({
            type: 'GET',
            url: '@Url.Action("_createDataStructureBinding", "DataStructureSearch")' + parameters,
            dataType: 'html',
            success: function (data) {
                var windowElement = $.telerik.window.create({
                    title: title,
                    html: data,
                    contentUrl: "",
                    actions: ["Close"],
                    modal: true,
                    resizable: false,
                    draggable: true,
                    scrollable: false,
                    onClose: function () {
                        $("#windowCreate").data('tWindow').destroy();
                    }
                });

                windowElement.attr('id', 'windowCreate');
                var window = $(windowElement).data('tWindow');
                window.center().open();

                if(!copy)
                {
                    $(message).replaceAll('.bx-rpm-createDataStructureContainer .bx-rpm-message');
                    $('.bx-rpm-createDataStructureContainer .bx-rpm-message').attr('id', 'message');
                    createWondowShowmessage();
                }
                resetAllTelerikIconTitles();
            }
        });
    }

    function openDropdown (elem){
        var items = $('.bx-rpm-options');
        var dropDown = $(elem).parent();
        var offset;
        for(var i = 0; i < items.length; i++){
            if($(items[i]).parent().attr('id') == dropDown.attr('id') && $(items[i]).css('display') == 'none'){
                $(items[i]).parent().find('.bx-rpm-options').css('z-index', '10');
                $(items[i]).parent().find('.bx-rpm-options').slideToggle('fast');
                offset = $(dropDown).height() + $(dropDown).position().top + $(dropDown).parents('.bx-rpm-variable-item').position().top + $('#variableContainer').position().top - $('#variableContainer').scrollTop() - $(window).scrollTop() + 2;
                $(dropDown).find('.bx-rpm-options').css('top', offset);
                $(dropDown).find('.bx-rpm-options').css('min-width', $(dropDown).outerWidth());
            }
            else if($(items[i]).css('display') != 'none'){
                $(items[i]).parent().find('.bx-rpm-options').css('z-index', '9');
                $(items[i]).parent().find('.bx-rpm-options').slideToggle('fast');
            }
        }       
    }

    function closeDropdown(option){
        $(option).parent().parent().find('.bx-rpm-option').attr('value', $(option).attr('value'));
        $(option).parent().parent().find('.bx-rpm-value').val($(option).attr('value'));
        $(option).parent().parent().find('.bx-rpm-option').text($(option).text());
        $(option).parent().parent().find('.bx-rpm-options').slideToggle('fast');
    }

    $(window).scroll(function (){
        closeAllDropdown();
    });

    $(window).click(function (e){
        if(!$(e.target).hasClass('bx-rpm-option') && !$(e.target).hasClass('bx-rpm-options') && !$(e.target).hasClass('bx-rpm-option-arrow'))
            closeAllDropdown();
    });

    function closeAllDropdown(){
        var items = $('.bx-rpm-options');
        for(var i = 0; i < items.length; i++){
            if($(items[i]).css('display') != 'none'){
                $(items[i]).css('display', 'none');
            }
        }
    }

    function disableAllDropdown(){
        $('.bx-rpm-option').removeAttr('onclick');
        $('.bx-rpm-option').addClass('bx-disabled');
        $('.bx-rpm-option-arrow').addClass('bx-disabled');
    }

    $(window).on('beforeunload', function(){
        if(changed)
            return 'You have unsaved changes!';
    });
</script>
