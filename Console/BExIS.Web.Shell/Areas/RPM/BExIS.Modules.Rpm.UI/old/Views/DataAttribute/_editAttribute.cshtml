@using Telerik.Web.Mvc.UI
@using System.Linq;
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Modules.Rpm.UI.Models

@model BExIS.Modules.Rpm.UI.Models.DataAttributeModel

@if(Model != null)
{
    long unitIndex = 0;
    long dataTypeIndex = 0;
    string className = "";
    HtmlString showConstraintsStyle = new HtmlString("");

    //if(Model.Unit != null)
    //{
    //    unitIndex = Model.Unit.Id;
    //}

    //dataTypeList = dataTypeList.OrderBy(p => p.Name).ToList();

    if (Model.ShowConstraints == true)
    {
        showConstraintsStyle = new HtmlString("style = \"display: table-row;\"");
    }
    else
    {
        showConstraintsStyle = new HtmlString("style = \"display: none;\"");
    }

    if (Model.DataType != null)
    {
        dataTypeIndex = Model.DataType.Id;
    }

<div class="planingPartialDiv" id="createAttribute">
@using (Html.BeginForm("editAttribute", "DataAttribute", new { area = "RPM" }))
{
   @(Html.HiddenFor(m=>m.Id, new {@class = "hidden"})) 
    <table class="bx-rpm-info">
        <tr>
            <td id="name" style="width:120px">
                Name <span class="bx bx-required" title="Required"></span>
            </td>
            <td>
                @(Html.TextBoxFor(m => Model.Name, new { @class = "bx-input", @autofocus = "autofocus", @tabindex = "1" }))
                <span class="bx-errorMsg" colspan="4">@Session["nameMsg"]</span>
            </td>
            <td rowspan="3" style="vertical-align:top;width:90px">
                Description
            </td>
            <td rowspan="3" style="vertical-align:top;">
                @(Html.TextAreaFor(m => Model.Description, new {@class = "bx-textarea", @style="min-height: 100px;", @tabindex = "3"}))
            </td>
        </tr>
        <tr id="shortname">
            <td style="width:120px">
                Short Name
            </td>
            <td>
                @(Html.TextBoxFor(m => Model.ShortName, new {@class = "bx-input", @tabindex = "2"}))
            </td>
        </tr>
        <tr>
            <td style="width:120px">
                Unit
            </td>
            <td>
                <div style="width:354px">
                    @Html.DropDownListFor(m => Model.Unit.Id, new SelectList(Model.Units, "Id", "Name"), new { @tabindex = "4", @id = "unitId", @class = "bx-dropdown bx-rpm-dropdown" })
                    <span class="t-arrow-down bx-rpm-dropdownArrow"/>
                </div>
            </td>
        </tr>
        <tr>
            <td style="width:120px">
                Data Type
            </td>
            <td style="width:354px">
                @Html.DropDownListFor(m => Model.DataType.Id, new SelectList(Model.DataTypes, "Id", "Name"), new { @tabindex = "5", @id= "dataTypeId", @class = "bx-dropdown bx-rpm-dropdown" })
                <div class= "t-arrow-down bx-rpm-dropdownArrow"></div>
            </td>
        </tr>
        <tr>
            <td colspan="4" class="bx-rpm-container">
                <h4><a class="bx-link" href="javascript:clickConstraints()">Constraints <span class="bx bx-angle-double-down" id="openconstraints"></span></a></h4>
            </td>
        </tr>
        <tr id="constraints" @showConstraintsStyle >
            <td colspan="4" class="bx-rpm-container">
                @if(Model.DomainConstraints.Count > 0 || Model.RangeConstraints.Count > 0 || Model.PatternConstraints.Count > 0)
                {    
                    className =  "";
                }
                else
                {
                    className = "constraints";
                }
                           
                @if (Model.RangeConstraints.Count > 0)
                {
                    @Html.Partial("_rangeConstraintView", Model.RangeConstraints.FirstOrDefault())
                }
                else
                { 
                    @Html.Partial("_rangeConstraintView", new RangeConstraintModel(Model.Id))
                }
                        

                @if (Model.PatternConstraints.Count > 0)
                {
                    @Html.Partial("_patternConstraintView", Model.PatternConstraints.FirstOrDefault())
                }
                else
                { 
                    @Html.Partial("_patternConstraintView", new PatternConstraintModel());
                }
                        
                   
                @if (Model.DomainConstraints.Count > 0)
                {
                    @Html.Partial("_domainConstraintView", Model.DomainConstraints.FirstOrDefault())
                }
                else
                { 
                    @Html.Partial("_domainConstraintView", new DomainConstraintModel());
                }
                    
            </td>
        </tr>
</table>


    
    @*<div class="bx-rpm-functions bx-rpm-buttons">
        <font class="bx-rpm-buttons" color="red">*</font> Indicates required field
    </div>*@
    <div class="bx-rpm-submit bx-rpm-buttons">
        <button name="create" value="create" type="submit" class="bx-button action"  id="saveButton" title="Save The Unit" tabindex = "6">Save</button>
        @Html.ActionLink("Cancel", "AttributeManager", "DataAttribute", new { area = "RPM", @class = "bx-button action", @title = "Cancel", @tabindex = "7" })
    </div>  
               
}
</div>
    
<script type="text/jscript">
    $(document).ready(function () {
        onRangeChange();
    });

    function onRangeChange() {
        if ($('#range_min').val() > $('#range_max').val()) {
            $('.bx-rpm-constrainTable #errorMsg').removeClass('hidden');
            $('.bx-rpm-constrainTable #errorMsgText').text('Invalid Constraint Max must be greater/equals than Min.');
        }
        else if (parseInt($('#range_min').val()) <= parseInt($('#range_max').val())) {
            $('.bx-rpm-constrainTable #errorMsg').addClass('hidden');
            $('.bx-rpm-constrainTable #errorMsgText').text('');
        }
    }

    $('#rangeConstraint').change(function () {

        if ($('#range_invert').is(":checked")) {
            $('#range_invert').val(true);
        }
        else
        {
            $('#range_invert').val(false);
        }

        if ($('#range_mininclude').is(":checked")) {
            $('#range_mininclude').val(true);
        }
        else {
            $('#range_mininclude').val(false);
        }

        if ($('#range_maxinclude').is(":checked")) {
            $('#range_maxinclude').val(true);
        }
        else {
            $('#range_maxinclude').val(false)
        }
        var variables = '?invert=' + $('#range_invert').val() + '&min=' + $('#range_min').val() + '&max=' + $('#range_max').val() + '&mininclude=' + $('#range_mininclude').val() + '&maxinclude=' + $('#range_maxinclude').val();

        $.getJSON('/RPM/DataAttribute/getRangeConstraintFormalDescription/' + variables, function (data) {
            $('#range_FormalDescription').attr("title",data);
        });
        onRangeChange();
    })

    $('#patternConstraint').change(function () {

        if ($('#pattern_invert').is(":checked")) {
            $('#pattern_invert').val(true)
        }
        else
        {
            $('#pattern_invert').val(false)
        }

        var variables = '?invert=' + $('#pattern_invert').val() + '&phrase=' + $('#pattern_phrase').val();

        $.getJSON('/RPM/DataAttribute/getPatternConstraintFormalDescription/' + variables, function (data) {
            $('#pattern_FormalDescription').attr("title", data);
        });
    })

    $('#domainConstraint').change(function () {

        if ($('#domain_invert').is(":checked")) {
            $('#domain_invert').val(true)
        }
        else
        {
            $('#domain_invert').val(false)
        }

        var variables = '?invert=' + $('#domain_invert').val() + '&Terms=' + $('#domain_terms').val();

        $.getJSON('/RPM/DataAttribute/getDomainConstraintFormalDescription/' + variables, function (data) {
            $('#domain_FormalDescription').attr("title", data);
        });
    })
    
    function restRange(item)
    {
        $('#rangeConstraint_' + item.id + ' #range_invert').val(false);
        $('#rangeConstraint_' + item.id + ' #range_invert').prop('checked', false);

        $('#rangeConstraint_' + item.id + ' #range_mininclude').val(true);
        $('#rangeConstraint_' + item.id + ' #range_mininclude').prop('checked', true);

        $('#rangeConstraint_' + item.id + ' #range_maxinclude').val(false);
        $('#rangeConstraint_' + item.id + ' #range_maxinclude').prop('checked', false);

        $('#rangeConstraint_' + item.id + ' #range_min').val(0);
        $('#rangeConstraint_' + item.id + ' #range_max').val(0);
        $('#rangeConstraint_' + item.id + ' #range_desc').val("");
        onRangeChange();
    }

    function restPattern(item)
    {
        $('#patternConstraint_' + item.id + ' #pattern_invert').val(false);
        $('#patternConstraint_' + item.id + ' #pattern_invert').prop('checked', false);

        $('#patternConstraint_' + item.id + ' #pattern_phrase').val("");
        $('#patternConstraint_' + item.id + ' #pattern_desc').val("");
    }

    function resetDomain(item)
    {
        $('#domainConstraint_' + item.id + ' #domain_invert').val(false);
        $('#domainConstraint_' + item.id + ' #domain_invert').prop('checked', false);

        $('#domainConstraint_' + item.id + ' #domain_terms').val("");
        $('#domainConstraint_' + item.id + ' #domain_desc').val("");
    }

    $('#unitId').change(function () {

        $.getJSON('/RPM/DataAttribute/getDatatypeList/' + $(this).val(), function (data) {
            

            var items = '';
            $.each(data, function (i, dataType) {
                items += "<option value='" + dataType.Value + "'>" + dataType.Text + "</option>";
            });
            $('#dataTypeId').html(items);
        });
    })
   
    $(document).ready(function () {
        $.getJSON('/RPM/DataAttribute/getDatatypeList/' + $('#unitId').val(), function (data) {
            var items = '';
            $.each(data, function (i, dataType) {
                if (dataType.Value == @dataTypeIndex)
                    items += "<option selected='selected' value='" + dataType.Value + "'>" + dataType.Text + "</option>"; 
                else
                    items += "<option value='" + dataType.Value + "'>" + dataType.Text + "</option>";
            });
            $('#dataTypeId').html(items);
        });
    })


    function clickConstraints()
    {
        $('#constraints').toggle();
        if($('#openconstraints').hasClass('bx-angle-double-down'))
            $('#openconstraints').attr('class','bx bx-angle-double-up');
        else
            $('#openconstraints').attr('class','bx bx-angle-double-down');
    }

</script>    
}
else
{
 <font color="red" style="margin:10px">Can't edit Data Attribute doesn't exist anymore.</font>
}
