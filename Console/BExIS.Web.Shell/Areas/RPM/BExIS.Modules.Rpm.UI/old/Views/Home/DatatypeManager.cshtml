@using Telerik.Web.Mvc.UI
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Dlm.Services.DataStructure
@using System
@using System.Text.RegularExpressions
@using BExIS.Modules.Rpm.UI.Models
@using BExIS.IO.DataType.DisplayPattern
@model List<BExIS.Dlm.Entities.DataStructure.DataType>

@*<header>*@
<link href="@Url.Content("~/Areas/RPM/Stylesheets/RPM.css")" rel="stylesheet" type="text/css" />
@*</header> *@

@*@{
    ViewBag.Title = "Data Type Manager";
}*@

@section Information
{
    With this interface you are able to manage (e.g. create, edit, delete) data types which are required to define units and data attributes. Data types cannot be edited or deleted once they are associated with a unit (they become locked).
    <p>
    <a href="/RPM/Help/Index/#_Toc434570749" class="bx-informationLink" title="go to help" target="_blank">More</a>
</p>
}

@{
    DataTypeModel dataTypeModel = (DataTypeModel)Session["DataType"];
    string windowName = "Create Data Type";

    if(dataTypeModel != null)
    {
        if (!string.IsNullOrEmpty(dataTypeModel.dataType.Name))
        {
            windowName = "Edit Data Type: " + dataTypeModel.dataType.Name + " (Id: " + dataTypeModel.dataType.Id + ")";
        }
    }
    else
    {
        dataTypeModel = new DataTypeModel();
    }
}



<div title="Create a new Data Type" class="bx-rpm-buttons">
    @Html.ActionLink("Create Data Type", "openDataTypeWindow", "Home", new { id = 0 }, new { @class = "bx-button function" })
</div>

    @(Html.Telerik().Grid(Model)
            .Name("bx-rpm-dataTypeGrid")
            .Sortable()
            .Filterable()
            .Columns(columns =>
            {
            columns.Bound(c => c.Id)
            .Width(100);
            columns.Bound(c => c.Name);
            columns.Bound(c => c.SystemType);
            columns.Template(
                @<text>
                    @if (DataTypeDisplayPattern.Materialize(item.Extra) != null)
                    {
                        <span>@DataTypeDisplayPattern.Materialize(item.Extra).StringPattern</span>
                    }
                </text>
            )
            .Title("Display Pattern");
            columns.Bound(c => c.Description);
            columns.Template(
                        @<text>
                            @if(!(item.DataContainers.Count > 0))
                            {
                                <div>
                                    @Html.ActionLink(" ", "openDataTypeWindow", "Home", new { id = item.Id }, new { @class = "bx bx-grid-function bx-edit", title = "Edit Data Type \"" + item.Name + "\"" })
                                    @Html.ActionLink(" ", "deletDataType", "Home", new { id = item.Id, item.Name }, new { @class ="bx bx-grid-function bx-trash", title = "Delete Data Type \"" + item.Name + "\"", onclick = "return confirm('Are you sure you want to delete the Data Type " + item.Name + " ?')" })
                                </div>
                            }
                            else
                            {
                                <div>
                                    <div class="bx bx-grid-function bx-edit bx-disabled" disabled="disabled" title='Edit Data Type "@item.Name"'></div>
                                    <div class="bx bx-grid-function bx-trash bx-disabled" disabled="disabled" title='Delete Data Type "@item.Name"'></div>
                                </div>
                            }
                        </text>
                    ).Width(70)
                        .ClientTemplate(
                            @Html.ActionLink(" ", "openDataTypeWindow", "Home", new { id = "<#= id #>" }, new { @class = "bx bx-grid-function bx-edit" }).ToHtmlString() +
                            @Html.ActionLink(" ", "deletDataType", "Home", new { id = "<#= id #>", dataTypeModel.dataType.Name }, new { @class = "bx bx-grid-function bx-trash", onclick = "return confirm('Are you sure you want to delete the Data Type " + dataTypeModel.dataType.Name + " ?')" }).ToHtmlString()
                        );
                })
                .ClientEvents(events=>events.OnDataBound("onDataBound"))
    )
    <div style="position:absolute; left:calc(50% - 250px); top:15%;">
                    @{ Html.Telerik().Window()
                            .Name("DataTypeWindow")
                            .Title(windowName)
                            .Visible((bool)Session["Window"])
                            .Draggable(true)
                            .Modal(true)
                            .Content(@<text>
                                        @Html.Partial("_editDataType", dataTypeModel)
                                        </text>)
                            .Render()
                            ;
        
                    }
                    @{Session["Window"] = false;}
    </div>

<script type="text/javascript">

    function onDataBound()
    {
        addTooltips();
    }

</script>