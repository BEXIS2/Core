@using System.Data
@using Telerik.Web.Mvc.UI
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Dlm.Services.DataStructure
@using BExIS.Modules.Rpm.UI.Models;
@model BExIS.Modules.Rpm.UI.Models.DataStructureDesignerModel

@{
    ViewBag.Title = "Planing";

    VariableStruct variableStruct = new VariableStruct();
    string terms = "";

    if (Session["variableId"] != null && Convert.ToUInt64(Session["variableId"]) != 0)
    {
        variableStruct = Model.variableStructs.Where(v => v.variable.Id.Equals((long)Session["variableId"])).FirstOrDefault();
    }

}
@if (Session["variableId"] == null)
{ 
    <span class="bx-errorMsg">Variable not found</span>
}
else
{
    if (variableStruct.variable == null)
    { 
        <span class="bx-errorMsg">Can't edit Variable doesn't exist anymore.</span>
    }
    else
    {
        if (Model.inUse == true)
        { 
            <span class="bx-errorMsg">Can't edit Variable, Data Strucure in use</span>
        }
        else
        {
            <script type="text/javascript">
            function toggleDiv(element){
            if(document.getElementById(element).style.display == 'none')
                document.getElementById(element).style.display = 'block';
            else
                document.getElementById(element).style.display = 'none';
            }
            </script>

            <div class="planingPartialDiv" id="createVariable">
                @using (Html.BeginForm("editVariable", "Home", new { area = "RPM" }))
                {
                @(Html.TextBox("dataStructureId", Model.dataStructure.Id, new { @class = "hidden" }))
                <table class="bx-rpm-info">
                    <tr id="name">
                        <td style="width:129px">
                            Name
                        </td>
                        <td>
                            @(Html.TextBox("name", variableStruct.variable.Label, new { @autofocus = "autofocus", @tabindex = 1, @class="bx-input" }))
                            <div class="errorMsg" style="vertical-align:top;">
                                 <font color="red">@ViewData["varErrorMsg"]</font>
                            </div>
                        </td>
                        <td style="vertical-align: top; width:103px" rowspan="4">
                            Description
                        </td>
                        <td style="vertical-align: top;" rowspan="4">
                            @(Html.TextArea("description", variableStruct.variable.Description, new { @tabindex = 2, @class = "bx-textarea" }))
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Is Optional
                        </td>
                        <td>
                            @(Html.CheckBox("optional", variableStruct.variable.IsValueOptional, new { @tabindex = 3 }))
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Id
                        </td>
                        <td>
                            @(Html.TextBox("id_disabled", variableStruct.variable.Id, new { @class = "bx-input bx-disabled", @disabled="disabled"}))
                            @(Html.Hidden("id", variableStruct.variable.Id))  
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Unit
                        </td>
                        <td>
                            <div>
                                <span>
                                    @Html.DropDownList("unitId", new SelectList(variableStruct.unitStructs, "Id", "Name", variableStruct.variable.DataAttribute.Unit.Id), new { @tabindex = "4", @class = "bx-dropdown bx-rpm-dropdown" })
                                </span>
                                <span class="t-arrow-down bx-rpm-dropdownArrow" />
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            DataType
                        </td>
                        <td>
                            @(Html.TextBox("name", variableStruct.variable.DataAttribute.DataType.Name, new { @class = "bx-input bx-disabled", @disabled = "disabled" }))
                        </td>
                    </tr>
                    <tr>
                        <td colspan ="3">
                            <h4>Constrains</h4>
                        </td>
                    </tr>
                    <tr>
                        <td colspan ="4">
                            <table class="bx-rpm-constrainTable">                          
                                @foreach (RangeConstraint c in variableStruct.rangeConstraints)
                                {
                                <tr>
                                     <td title="@c.FormalDescription">
                                        Range
                                    </td>
                                    <td class="bx-rpm-negated">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("invert")</div>
                                            @Html.CheckBox("Negated", c.Negated, new {disabled = "disabled", @class = "bx-rpm-checkBox" })
                                        </div>
                                    </td>
                                    <td class="bx-rpm-constrainValue">                                 
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Min ")</div>
                                            @Html.TextBox("min",c.Lowerbound, new {disabled = "disabled", @class = "bx-input bx-rpm-midinput" })
                                        </div>
                                        <div class="bx-rpm-container bx-rpm-include">
                                            <div class="bx-rpm-text">@Html.Label("include")</div>
                                            @Html.CheckBox("lowerInclude", c.LowerboundIncluded, new {disabled = "disabled", @class= "bx-rpm-checkBox" })
                                        </div>
                                        
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Max")</div>
                                            @Html.TextBox("max",c.Upperbound, new {disabled = "disabled", @class = "bx-input bx-rpm-midinput" })
                                        </div>
                                        <div class="bx-rpm-container bx-rpm-include">
                                            <div class="bx-rpm-text">@Html.Label("include")</div>
                                            @Html.CheckBox("upperInclude", c.UpperboundIncluded, new {disabled = "disabled", @class = "bx-rpm-checkBox" })
                                        </div>
                                    </td>
                                    <td class="bx-function bx-info bx-disabled" style="text-align:center; margin:30px 20px 0px 0px;" title="@c.FormalDescription"></td>
                                    <td class="constrainDesc">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Description")</div>
                                            @if(String.IsNullOrEmpty(c.Description))
                                            {
                                                c.Description = ""; 
                                            }
                                            @Html.TextBox("desc", c.Description, new { disabled = "disabled", @class = "bx-input" })
                                        </div>
                                    </td>
                                </tr>
                                }
                                @foreach (PatternConstraint c in variableStruct.patternConstraints)
                                {
                                <tr>
                                    <td title="@c.FormalDescription">
                                        Pattern
                                    </td>
                                    <td class="bx-rpm-negated">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("invert")</div>
                                            @Html.CheckBox("Negated", c.Negated, new {disabled = "disabled", @class = "bx-rpm-checkBox" })
                                        </div>
                                    </td>
                                    <td class="bx-rpm-constrainValue">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("RegEx Pattern: ")</div>
                                            @Html.TextBox("pattern", c.MatchingPhrase, new { disabled = "disabled", @class = "bx-input" })
                                        </div>
                                    </td>
                                    <td class="bx-function bx-info bx-disabled" style="text-align:center; margin-top:30px" title="@c.FormalDescription"></td> 
                                    <td class="constrainDesc">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Description")</div>
                                            @if (String.IsNullOrEmpty(c.Description))
                                            {
                                                c.Description = "";
                                            }
                                            @Html.TextBox("desc", c.Description, new { disabled = "disabled", @class = "bx-input" })
                                        </div>
                                    </td>
                                </tr>
                                } 
                                @foreach (DomainConstraint c in variableStruct.domainConstraints)
                                {
                                <tr>
                                    <td title="@c.FormalDescription">
                                        Domain
                                    </td>
                                    <td class="bx-rpm-negated">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("invert")</div>
                                            @Html.CheckBox("Negated", c.Negated, new {disabled = "disabled", @class = "bx-rpm-checkBox" })
                                        </div>
                                    </td>
                                    <td class="bx-rpm-constrainValue">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Terms: ")</div>
                                            @if (c.Items != null)
                                            {
                                                foreach (DomainItem i in c.Items)
                                                {
                                                    if (String.IsNullOrEmpty(i.Value))
                                                    {
                                                        if (terms == "")
                                                        {
                                                            terms = i.Key;
                                                        }
                                                        else
                                                        {
                                                            terms = terms + ", " + i.Key;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (terms == "")
                                                        {
                                                            terms = i.Key + ", " + i.Value;
                                                        }
                                                        else
                                                        {
                                                            terms = terms + "; " + i.Key + ", " + i.Value;
                                                        }
                                                    }
                                                }
                                            }
                                            @Html.TextBox("terms", terms, new { disabled = "disabled", @class = "bx-input" })
                                        </div>
                                    </td>
                                    <td class="bx-function bx-info bx-disabled" style="text-align:center; margin-top:30px" title="@c.FormalDescription"></td>
                                    <td class="constrainDesc">
                                        <div class="bx-rpm-container">
                                            <div class="bx-rpm-text">@Html.Label("Description")</div>
                                            @if (String.IsNullOrEmpty(c.Description))
                                            {
                                                c.Description = "";
                                            }
                                            @Html.TextBox("desc", c.Description, new { disabled = "disabled", @class = "bx-input" })
                                        </div>
                                    </td>
                                </tr>
                                }                        
                            </table>
                        </td>
                    <tr><td colspan="2"> </td></tr>
                </table> 
                <div class="bx-rpm-submit bx-rpm-buttons">
                    <button name="create" value="create" type="submit" class="bx-button action"  id="saveButton" title="Save The Unit" tabindex = "5">Save</button>
                    @Html.ActionLink("Cancel", "showDataStructure", "Home", new { SelectedItem = Model.dataStructure.Id.ToString() + "," + Model.structured.ToString() }, new { area = "RPM", @class = "bx-button action", @title = "Cancel", @tabindex = "6" })
                </div>
                }
            </div>
        }
    }
}