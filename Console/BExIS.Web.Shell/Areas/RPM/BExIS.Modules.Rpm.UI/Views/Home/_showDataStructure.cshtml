@using Telerik.Web.Mvc.UI;
@using BExIS.Dlm.Entities.DataStructure;
@using System.Data;
@using BExIS.Modules.Rpm.UI.Models;
@model BExIS.Modules.Rpm.UI.Models.DataStructureDesignerModel

@{
    DataRow r = null;
    List<long> variableIds = new List<long>();
    string order = "";
    for (int i = 0; i < Model.dataStructureTable.Rows.Count; i++)
    {
        r = Model.dataStructureTable.Rows[i];

        if (r.ItemArray.First().ToString().ToLower().Equals("variable id"))
        {
            foreach (object o in r.ItemArray)
            {
                if (o != r.ItemArray.First())
                {
                    variableIds.Add(Convert.ToInt64(o));
                    if (o != r.ItemArray.Last())
                    {
                        order += Convert.ToInt64(o) + ",";
                    }
                    else
                    {
                        order += Convert.ToInt64(o);
                    }
                }
            }
        }
    }


    List<List<ItemStruct>> unitStructs = new List<List<ItemStruct>>();
    List<long> unitId = new List<long>();

}

<div class="t-widget" id = "DataStructureGrid">
    @Html.Hidden("order", order, new { @id = "order" })
    <table cellspacing ="0"> 
        @for (int i = 0; i < Model.dataStructureTable.Rows.Count; i++)
        {
            r = Model.dataStructureTable.Rows[i];

            switch (r.ItemArray.First().ToString().ToLower())
            {
                case "functions":
                        if (!Model.inUse)
                        {
                            <tr class ="bx-rpm-function">
                            @for (int j = 0; j < r.ItemArray.Length; j++)
                            {
                                if (r.ItemArray[j] != r.ItemArray.First())
                                {
                                    <td class="data @variableIds[j-1]">@r.ItemArray[j].ToString()</td>
                                }
                                else
                                {
                                    <td class="empty"></td>
                                }
                            }
                            </tr>
                        }
                        else
                        {
                            <tr class ="bx-rpm-locked">
                            @for (int j = 0; j < r.ItemArray.Length; j++)
                            {
                                if (r.ItemArray[j] != r.ItemArray.First())
                                {
                                    <td class="data @variableIds[j-1]">@r.ItemArray[j].ToString()</td>
                                }
                                else
                                {
                                    <td class="empty"></td>
                                }
                            }
                            </tr>
                        }
                    break;

                case "name":
                    <tr class ="name">
                        @for (int j = 0; j < r.ItemArray.Length; j++)
                        {
                            if (r.ItemArray[j] != r.ItemArray.First())
                            {
                                if (!Model.inUse)
                                {
                                    <td class="data @variableIds[j-1]">@Html.TextBox("varName", r.ItemArray.ToString(), new { @Value = r.ItemArray[j].ToString(), @tabindex = "5", onchange = "onChangeInput(this)" })</td>
                                }
                                else
                                {
                                    <td class="data @variableIds[j-1]">@Html.TextBox("varName", r.ItemArray.ToString(), new { @Value = r.ItemArray[j].ToString(), @tabindex = "5", @disabled = "disabled" })</td>
                                }
                            }
                            else
                            {
                                <td class="head">@r.ItemArray[j].ToString()</td>
                            }
                        }                          
                        </tr>
                    break;

                case "description":
                        <tr class ="description">
                        @for (int j = 0; j < r.ItemArray.Length; j++)
                        {
                            if (r.ItemArray[j] != r.ItemArray.First())
                            {
                                if (!Model.inUse)
                                {
                                    <td class="data @variableIds[j-1]">
                                        <textarea id="varDesc" onChange ="onChangeTextarea(this)" name="varDesc" tabindex = "5">@r.ItemArray[j].ToString()</textarea>
                                    </td>
                                }
                                else
                                {
                                    <td class="data @variableIds[j-1]">
                                        <textarea disabled="disabled" id="disabled" name="disabled" tabindex="5">@r.ItemArray[j].ToString()</textarea>
                                    </td>
                                }
                            }
                            else
                            {
                                <td class="head">@r.ItemArray[j].ToString()</td>
                            }
                        }                          
                        </tr>
                    break;

                case "optional":
                    object obj = new object();
                    DataRow temp = null;
  
                        <tr class="optional">
                        @for (int j = 0; j < r.ItemArray.Count(); j++)
                        {
                            obj = r.ItemArray[j];

                            if (obj != r.ItemArray.First())
                            {
                                if (!Model.inUse)
                                {
                                    foreach (DataRow row in Model.dataStructureTable.Rows)
                                    {
                                        if (row.ItemArray.First().ToString().ToLower() == "variable id")
                                        {
                                            temp = row;
                                            break;
                                        }
                                    }

                                    <td class="data @variableIds[j-1]"><input id="optional" name="optional" type="checkbox" value="@temp.ItemArray[j]" class="checkBox" tabindex = "5" onchange = "onChangeCheckbox(this)"
                                    @if (Convert.ToBoolean(obj.ToString().ToLower()) == true)
                                    {
                                        <text>checked="checked"</text>
                                    }
                                    /></td>
                                }
                                else
                                {
                                    <td class="data @variableIds[j-1]">
                                        <input id="optional" name="optional" type="checkbox" class="checkBox bx-disabled" disabled="disabled" tabindex="5"
                                        @if (Convert.ToBoolean(obj.ToString().ToLower()) == true)
                                        {
                                            <text> checked="checked" </text>  
                                        } />
                                    </td>
                                }
                            }
                            else
                            {
                                <td class="head">@obj.ToString()</td>
                            }
                        }
                        </tr>
                    break;

                case "variable id": 
                        <tr>
                        @for (int j = 0; j < r.ItemArray.Length; j++)
                        {
                            if (r.ItemArray[j] != r.ItemArray.First())
                            {
                                <td class="data @variableIds[j-1]">
                                    @Html.TextBox("disabled", r.ItemArray[j].ToString(), new { @Value = r.ItemArray[j].ToString(), @tabindex = "5", @disabled = "disabled" })
                                    @Html.TextBox("varId", r.ItemArray[j].ToString(), new { @class = "hidden", @hidden = "hidden",  @Value = r.ItemArray[j].ToString() })
                                </td>
                                unitStructs.Add(Model.variableStructs.Where(v => v.variable.Id.Equals(Convert.ToInt64(r.ItemArray[j]))).FirstOrDefault().unitStructs);
                                unitId.Add(Model.variableStructs.Where(v => v.variable.Id.Equals(Convert.ToInt64(r.ItemArray[j]))).FirstOrDefault().variable.Unit.Id);
                            }
                            else
                            {
                                <td class="head">@r.ItemArray[j].ToString()</td>
                            }
                        }
                        </tr>
                    break;

                case "unit":
                        <tr class ="unit">
                        @for (int j = 0; j < r.ItemArray.Count(); j++)
                        {
                            obj = r.ItemArray[j];

                            if (obj != r.ItemArray.First())
                            {
                                if (!Model.inUse)
                                {
                                    <td class="data @variableIds[j-1]">@Html.DropDownList("varUnit", new SelectList(unitStructs.ElementAt(j-1),"Id","Name", unitId.ElementAt(j-1)), new { @tabindex = "5", onchange = "onChangeTextareaSelect(this)" })</td>
                                }
                                else
                                {
                                    <td class="data @variableIds[j-1]">@Html.TextBox("disabled", obj.ToString(), new { @Value = obj.ToString(), @tabindex = "5", @disabled = "disabled" })</td>
                                }
                            }
                            else
                            {
                                <td class="head">@obj.ToString()</td>
                            }
                        }                          
                        </tr>
                    break;

                default:   
                        <tr>
                        @for (int j = 0; j < r.ItemArray.Length; j++)
                        {
                            if (r.ItemArray[j] != r.ItemArray.First())
                            {
                                <td class="data @variableIds[j-1]">@Html.TextBox("disabled", r.ItemArray[j].ToString(), new { @Value = r.ItemArray[j].ToString(), @tabindex = "5", @disabled = "disabled" })</td>
                            }
                            else
                            {
                                <td class="head">@r.ItemArray[j].ToString()</td>
                            }
                        }
                        </tr>
                    break;
            }
        } 
    </table>
</div>

<script type="text/javascript" language="javascript">
    function onChangeInput(input)
    {
        input.setAttribute('value', input.value);
    }

    function onChangeCheckbox(checkbox) {
        if (checkbox.getAttribute('checked') == 'checked') {
            checkbox.removeAttribute('checked');
        }
        else {
            checkbox.setAttribute('checked', 'checked');
        }
    }

    function onChangeTextarea(textarea) {
        textarea.innerText = textarea.value;
    }

    function onChangeTextareaSelect(select) {
        for (var i = 0; i < select.getElementsByTagName('option').length; i++) {
            if (select.getElementsByTagName('option')[i].getAttribute('selected') == 'selected' && select.getElementsByTagName('option')[i].getAttribute('value') != select.value) {
                select.getElementsByTagName('option')[i].removeAttribute('selected');
            }
            else if (select.getElementsByTagName('option')[i].getAttribute('selected') != 'selected' && select.getElementsByTagName('option')[i].getAttribute('value') == select.value) {
                select.getElementsByTagName('option')[i].setAttribute('selected', 'selected');
            }
        }
    }

    $(document).ready(function () {
        generateHeader($("#order").val().split(','))
    });

    function generateHeader(order) {
        var first = order[0];
        var last = order[order.length - 1];

        for (var i = 0; i < $(".bx-rpm-function .data").length; i++) {
            var edit = '<a area="RPM" class="bx bx-grid-function bx-edit" title = "Edit Variable &quot;' + $(".name #varName")[i].value + '&quot;" href="/RPM/Home/openVariableWindow/' + $(".bx-rpm-function .data")[i].innerHTML + '"></a>';
            var del = '<a area="RPM" class="bx bx-grid-function bx-trash" title = "Delete Variable &quot;' + $(".name #varName")[i].value + '&quot;" href="/RPM/Home/deleteVariable/' + $(".bx-rpm-function .data")[i].innerHTML + '" onclick = "return confirm(\'Are you sure you want to delete the Variable ' + $(".name #varName")[i].value + '?\')"></a>'
            var temp = $(".bx-rpm-function .data")[i].innerHTML.split('?');
            var left = '<a area="RPM" class="bx bx-grid-function bx-previous" title = "Move Variable &quot;' + $(".name #varName")[i].value + '&quot; to the left" href="#" onclick="shiftVariable(' + temp[0] + ', -1)"></a>';
            var right = '<a area="RPM" class="bx bx-grid-function bx-next" title = "Move Variable &quot;' + $(".name #varName")[i].value + '&quot; to the right" href="#" onclick="shiftVariable(' + temp[0] + ', 1)"></a>';

            var leftDisabled = '<div area="RPM" class="bx bx-grid-function bx-previous bx-disabled" title = "Move Variable  &quot;' + $(".name #varName")[i].value + '&quot; to the left"></div>';
            var rightDisabled = '<div area="RPM" class="bx bx-grid-function bx-next bx-disabled" title = "Move Variable  &quot;' + $(".name #varName")[i].value + '&quot; to the right"></div>';

            $(".bx-rpm-function .data")[i].innerHTML = del;

            if (temp[0] != first && temp[0] != last)
                $(".bx-rpm-function .data")[i].innerHTML = left + edit + del + right;
            else {
                if (temp[0] == first && temp[0] == last) {
                    $(".bx-rpm-function .data")[i].innerHTML = leftDisabled + edit + del + rightDisabled;
                }
                else {
                    if (temp[0] == first)
                        $(".bx-rpm-function .data")[i].innerHTML = leftDisabled + edit + del + right;
                    else
                        $(".bx-rpm-function .data")[i].innerHTML = left + edit + del + rightDisabled;
                }
            }
        }

        for (var i = 0; i < $(".bx-rpm-locked .data").length; i++) {
            var editDisabled = '<div area="RPM" class="bx bx-grid-function bx-edit bx-disabled" title = "Edit Variable &quot;' + $(".name #varName")[i].value + '&quot;"></div>';
            var delDisabled = '<div area="RPM" class="bx bx-grid-function bx-trash bx-disabled" title = "Delete Variable &quot;' + $(".name #varName")[i].value + '&quot;"></div>';
            var leftDisabled = '<div area="RPM" class="bx bx-grid-function bx-previous bx-disabled" title = "Move Variable  &quot;' + $(".name #varName")[i].value + '&quot; to the left"></div>';
            var rightDisabled = '<div area="RPM" class="bx bx-grid-function bx-next bx-disabled" title = "Move Variable  &quot;' + $(".name #varName")[i].value + '&quot; to the right"></div>';

            $(".bx-rpm-locked .data")[i].innerHTML = leftDisabled + editDisabled + delDisabled + rightDisabled;
        }
    }

    function shiftVariable(id, step) {
        if(step != 0) {
            var order = $("#order").val().split(',');
            elementId = 0;
            for (var i = 0; i < order.length; i++) {
                if (order[i] == id) {
                    elementId = i;
                    break;
                }
            }
            var tempId = order[elementId];
            var end = 0;
            if (step > 0) {
                end = elementId + step;
                if (end > order.length - 1) {
                    end = order.length - 1;
                }
                for (var i = elementId; i <= end; i++) {
                    if (i != end) {
                        order[i] = order[i + 1];
                    
                    }
                    else {
                        order[i] = tempId;
                    }
                }
            }
            else if (step < 0) {
                end = elementId + step;
                if (end < 0) {
                    end = 0;
                }
                for (var i = elementId; i >= end; i--) {
                    if (i != end) {
                        order[i] = order[i - 1];
                    }
                    else {
                        order[i] = tempId;
                    }
                }
            }
            $("#order").val(order.join(','));
            generateTable(order);
        }
    }

    function generateTable(order) {
        for (var i = 0; i < $('#DataStructureGrid tr').length; i++) {
            var tempRow = $('#DataStructureGrid tr')[i].getElementsByTagName('td')[0].outerHTML;
            for (var j = 0; j < order.length; j++) {
                for (var k = 1; k < $('#DataStructureGrid tr')[i].getElementsByTagName('td').length; k++) {
                    if($('#DataStructureGrid tr')[i].getElementsByTagName('td')[k].classList.contains(order[j])) {
                        if ($('#DataStructureGrid tr')[i].classList.contains('bx-rpm-function')) {
                            $('#DataStructureGrid tr')[i].getElementsByTagName('td')[k].innerHTML = order[j] + '?DataStructureId=' + $('#DataStructureId').value;
                        }
                        tempRow = tempRow + $('#DataStructureGrid tr')[i].getElementsByTagName('td')[k].outerHTML;
                        break;
                    }
                }
            }
            $('#DataStructureGrid tr')[i].innerHTML = tempRow;
        }
        generateHeader(order);
    }
</script>