<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href="https://unpkg.com/gijgo@1.9.13/css/gijgo.min.css" rel="stylesheet" type="text/css" />
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script src="https://unpkg.com/gijgo@1.9.13/js/gijgo.min.js" type="text/javascript"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
</head>

<div class="container">
    <div class="row">

        <div class="col-md-4 col-sm-4" align="left">
            <div id="tree"></div>
        </div>
        <div class="col-md-3 col-sm-3" id="informationCard">
            <div class="card w-75">
                <div class="card-body" id="details_card" data="">
                    <div class="input-group mb-3">
                        Name : <input type="text" class="form-control" placeholder="Name" id="name">
                    </div>
                    <div class="input-group mb-3">
                        Short Name : <input type="text" class="form-control" placeholder="Short Name" id="shortname">
                    </div>
                    <div class="input-group mb-3">
                        Description : <input type="text" class="form-control" placeholder="Descriotion" id="description">
                    </div>
                    <div class="input-group mb-3">
                        Selectable : <input type="checkbox" id="selectable">
                    </div>
                    <div class="input-group mb-3">
                        Approved : <input type="checkbox" id="approved">
                    </div>
                    <div class="input-group mb-3">
                        Variables (multiple): <select id="variable" name="variable" multiple>
                        </select>
                    </div>
                    <div class="input-group mb-3">
                        External Link (multiple):  <select id="externallink" name="externallink" multiple>
                        </select>
                    </div>
                </div>
                <div>
                    <span class="glyphicon glyphicon-plus" onclick="add_new()"></span>
                    <span class="glyphicon glyphicon-minus" onclick="deletemeaning()"></span>
                    <span class="glyphicon glyphicon-pencil" onclick="update_item()"></span>
                </div>
            </div>
        </div>
        <div class="col-md-4 col-sm-4" id="ExternalLinkCard" align="right">
            <div class="card w-75">
                <div class="card-body" id="details_card_ExternalLinkCard" data="">
                    <div class="input-group mb-3">
                        Uri : <input type="text" class="form-control" placeholder="URI" id="URI">
                    </div>
                    <div class="input-group mb-3">
                        Name : <input type="text" class="form-control" placeholder="Name" id="Name">
                    </div>
                    <div class="input-group mb-3">
                        Type : <input type="text" class="form-control" placeholder="Type" id="Type">
                    </div>
                </div>
                <div>
                    <span class="glyphicon glyphicon-plus" onclick="add_new_Link()"></span>
                    <span class="glyphicon glyphicon-minus" onclick="delete_Link()"></span>
                    <span class="glyphicon glyphicon-pencil" onclick="update_item_Link()"></span>
                </div>
            </div>
        </div>
    </div>
</div>

<br />

<script type="text/javascript">

    allmeanings = null;
    start()

    //detailed view of a meaning element
    function details_meaning(data) {
        functABC('Details', data, 'json').then(function (result) {
            res = JSON.parse(result.Value);
            $('#details_card').attr('data', res["Id"])
            Object.keys(res).forEach(function (key) {
                if (key.toLowerCase() != "related_meaning") {
                    try {
                        if (key.toLowerCase() == "externallink") {
                            indexes = []
                            $.each(res[key], function (key, entry) {
                                indexes.push(entry["Id"])
                            })
                            update_dropdown_links(indexes);
                            //document.getElementById(key.toLowerCase()).prop('selectedIndex', res[key]);
                        }
                        if ((key.toLowerCase() == "approved") || (key.toLowerCase() == "selectable"))
                            document.getElementById(key.toLowerCase()).checked = res[key];
                        if (key.toLowerCase() == "variable") {
                            indexes = []
                            //console.log(res)
                            $.each(res[key], function (key, entry) {
                                //console.log(res[key])
                                indexes.push(res[key])
                            })
                            update_dropdown_variables(indexes);
                            //document.getElementById(key.toLowerCase()).prop('selectedIndex', res[key]);
                        }
                        else
                            document.getElementById(key.toLowerCase()).value = res[key]
                    }
                    catch (error) {
                        //console.error(error);
                    }
                }
            });
        })
    }
    //add new meaning
    function add_new() {
        try {
            json = {}
            $.each(document.getElementById('informationCard').getElementsByTagName('input'), function (key, entry) {
                if (document.getElementById(entry.id).type == "checkbox")
                    json[entry.id] = $('#' + entry.id).is(":checked") ? 1 : 0
                else
                    json[entry.id] = document.getElementById(entry.id).value
            })
            $.each(document.getElementById('informationCard').getElementsByTagName('select'), function (key, entry) {
                json[entry.id] = $('#' + entry.id).val()
            })
            functABC('Create', json, 'json').then(function (result) {
                window.location.reload();
            })
        }
        catch (error) {
            console.error(error);
        }
    }
    //delete existing meanins
    function deletemeaning() {
        id = $('#details_card').attr('data');
        functABC('Delete', id, 'json').then(function (result) {
            window.location.reload();
        })
    }
    //update existing meaning fields
    function update_item() {
        json = {}
        json["id"] = $('#details_card').attr('data');
        $.each(document.getElementById('informationCard').getElementsByTagName('input'), function (key, entry) {
            if (document.getElementById(entry.id).type == "checkbox")
                json[entry.id] = $('#' + entry.id).is(":checked") ? 1 : 0
            else
                json[entry.id] = document.getElementById(entry.id).value
        })
        $.each(document.getElementById('informationCard').getElementsByTagName('select'), function (key, entry) {
            json[entry.id] = $('#' + entry.id).val()
        })
        json_from_circ = JSON.stringify(json, replacerFunc())
        functABC('EditMeaning', json, 'json').then(function (result) {
            window.location.reload();
        })
    }

    //Ui function to update dropdown elements and start the tree
    function update_tree(id, parentId, allmeanings) {
        x = {
            parentID: parentId,
            childID: id
        }
        json_from_circ = JSON.stringify(x)
        functABC('updateRelatedManings', x, 'json').then(function (result) {
            window.location.reload();
        })
    }
    function update_dropdown_variables(index) {
        functABC('getVariables', null, 'json').then(function (result) {
            if (result != "") {
                //console.log(index)
                let dropdown = $('#variable');
                dropdown.empty();
                dropdown.append('<option selected="true" disabled></option>');
                $.each(result, function (key, entry) {
                    //if (key < 100)
                    //    console.log(key, entry)
                    if (index.includes(key.trim())) {
                        dropdown.append($('<option></option>').attr('value', key).text(entry).attr("selected", "selected"));
                    }
                    else
                        dropdown.append($('<option></option>').attr('value', key).text(entry));
                })
            }

        })
    }
    function update_dropdown_links(index) {
        functABC('getExternalLinks', null, 'json').then(function (result) {
            if (result != "") {
                result = JSON.parse(result.Value);
                let dropdown = $('#externallink');
                dropdown.empty();
                dropdown.append('<option selected="true" disabled></option>');
                $.each(result, function (key, entry) {
                    if (index.includes(entry["Id"])) {
                        //console.log(key)
                        dropdown.append($('<option></option>').attr('value', entry["Id"]).text(entry["Name"]).attr("selected", "selected"));
                        details_ExternalLink(entry["Id"])
                    }
                    else
                        dropdown.append($('<option></option>').attr('value', entry["Id"]).text(entry["Name"]));
                })
            }
        })
    }
    function start() {
        const externallinkss = document.getElementById('externallink');
        externallinkss.addEventListener('change', (e) => {
            details_ExternalLink(e.target.value)
        });
        functABC('index', null, 'json').then(function (result) {
            update_dropdown_variables([])
            update_dropdown_links([])
            if (result != "") {
                //let res = format(result.Value, 0)
                allmeanings = JSON.parse(result.Value);
                end_nodes = [];
                prepare_Data_for_view(allmeanings, end_nodes)
                clean_tree = JSON.parse(JSON.stringify(end_nodes, existerFunct()))
                var tree = $('#tree').tree({
                    uiLibrary: 'bootstrap4',
                    dataSource: clean_tree,
                    border: true,
                    dragAndDrop: true,
                    autoLoad: true,
                    childrenField: 'related_meaning',
                    textField: 'Name',
                    primaryKey: 'Id',
                    disabledField: 'selectable',
                });

                tree.on('nodeDrop', function (e, id, parentId, orderNumber) {
                    var result = tree.parents(id);
                    alert(result.join());
                    update_tree(id, parentId, allmeanings);
                    //window.location.reload();
                });
                tree.on('select', function (e, node, id) {
                    details_meaning(JSON.stringify({ id: id }))
                });
            }
        })
    }

    // data manipulation functions
    const replacerFunc = () => {
        const visited = new WeakSet();
        return (key, value) => {
            if (typeof value === "object" && value !== null) {
                if (visited.has(value)) {
                    console.log("exists : ", value)
                    return;
                }
                visited.add(value);
            }
            return value;
        };
    };
    const existerFunct = () => {
        const visited = new WeakSet();
        return (key, value) => {
            if (typeof value === "object" && value !== null) {
                if (visited.has(value)) {
                    return;
                }
                visited.add(value);
            }
            return value;
        };
    };
    function prepare_Data_for_view(allObjects, end_nodes) {
        allObjects.forEach(function (key, value) {
            if (end_nodes.some(element => element["Id"] == key["Id"])) {
                const indexOfObject = end_nodes.findIndex(object => {
                    return object["Id"] === key["Id"];
                });
                end_nodes.splice(indexOfObject, 1);
            }
            else {
                end_nodes.push(key)
                prepare_Data_for_view(key["related_meaning"], end_nodes)
            }

        })
    }
    async function functABC(action, data, datatype) {
        return new Promise(function (resolve, reject) {
            $.ajax({
                url: '/api/Meanings/' + action,
                type: 'POST',
                async: true,
                dataType: datatype,
                data: data,
                success: function (result) {
                    resolve(result)
                }
            })
        });
    }

    //detailed view of a External Link element

    function details_ExternalLink(id) {
        $('#details_card_ExternalLinkCard').attr('data', id)
        functABC('DetailExternalLinks', JSON.stringify({ id: id }), 'json').then(function (result) {
            res = JSON.parse(result.Value);
            $('#details_ExternalLink').attr('data', res["Id"])
            res = JSON.parse(result.Value);
            Object.keys(res).forEach(function (key) {
                try {
                    document.getElementById(key).value = res[key]
                }
                catch (error) {
                }
            });
        })
    }
    function add_new_Link() {
        try {
            json = {}
            $.each(document.getElementById('details_card_ExternalLinkCard').getElementsByTagName('input'), function (key, entry) {
                json[entry.id] = document.getElementById(entry.id).value
            })
            functABC('createExternalLink', json, 'json').then(function (result) {
                window.location.reload();
            })
        }
        catch (error) {
            console.error(error);
        }
    }
    function delete_Link() {
        id = $('#details_card_ExternalLinkCard').attr('data');
        console.log(id)
        functABC('deleteExternalLinks', id, 'json').then(function (result) {
            window.location.reload();
        })
    }

    function update_item_Link() {
        json = {}
        json["id"] = $('#details_card_ExternalLinkCard').attr('data');
        $.each(document.getElementById('details_card_ExternalLinkCard').getElementsByTagName('input'), function (key, entry) {
            json[entry.id] = document.getElementById(entry.id).value
        })
        json_from_circ = JSON.stringify(json, replacerFunc())
        console.log(json_from_circ)
        functABC('editExternalLinks', json, 'json').then(function (result) {
            window.location.reload();
        })
    }
</script>