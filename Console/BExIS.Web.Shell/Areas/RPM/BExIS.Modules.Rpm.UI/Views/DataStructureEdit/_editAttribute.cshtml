@using Telerik.Web.Mvc.UI
@using System.Linq;
@using BExIS.Dlm.Entities.DataStructure
@using BExIS.Modules.Rpm.UI.Models

@model BExIS.Modules.Rpm.UI.Models.AttributeEditStruct

<div class="bx-rpm-createAttributeContainer">
   @(Html.HiddenFor(m=>m.Id, new {@class = "hidden", @id = "id"})) 
    <table class="bx-rpm-info">
        <tr>
            <td>
                Name <span class="bx bx-required" title="Required"></span>
            </td>
            <td>
                <div title="The name will be used for a new Variable Template">@Html.TextBox("Name", Model.Name, new { @class = "bx-input", @id = "name", @autofocus = "true" })</div>
                <div class="hidden bx-rpm-error" id="messageContainer"><span id="message" class="bx-rpm-message" value="none"></span></div>
            </td>
            <td class="bx-rpm-function"></td>
        </tr>
        <tr>
            <td style="vertical-align:top;width:90px">
                Description
            </td>
            <td style="vertical-align:top;">
                @Html.TextArea("Description", Model.Description, new { @class = "bx-input", @id = "description" })
            </td>
            <td class="bx-rpm-function"></td>
        </tr>
        @*<tr id="shortname">
            <td style="width:120px">
                Short Name
            </td>
            <td>
                @(Html.TextBoxFor(m => m.ShortName, new {@class = "bx-input", @tabindex = "2"}))
            </td>
        </tr>*@
        <tr>
            <td>
                Unit
            </td>
            <td class="unit">
                <div class="bx-rpm-selectdropdown">
                    @Html.Partial("_dropdown", Model.Units)
                </div>
                @*<div class="bx-rpm-partial" style="display:none;">
                    @Html.Partial("_editUnit", new EditUnitStruct())
                </div>*@
            </td>
            @*<td class="bx-rpm-function" style="vertical-align:top">
                <div class="bx-function bx-add" id="addUnit"></div>
            </td>*@
        </tr>
        <tr id="datatype">
            <td>
                Data Type
            </td>
            <td class="datatype">
                <div class="bx-rpm-selectdropdown">
                    @Html.Partial("_dropdown", Model.DataTypes)
                </div>
            </td>
            <td class="bx-rpm-function"></td>
        </tr>
    </table>
    <table>
        <tr>
            <td colspan="4" class="bx-rpm-container">
                <h4><a class="bx-link" href="javascript:clickConstraints()">Constraints <span class="bx bx-angle-double-down" id="openconstraints"></span></a></h4>
            </td>
        </tr>
        <tr id="constraints">
            <td colspan="4" class="bx-rpm-rangeConstraint"></td>
        </tr>
        <tr id="constraints">
            <td colspan="4" class="bx-rpm-patternConstraint"></td>
        </tr>
        <tr id="constraints">
            <td colspan="4" class="bx-rpm-domainConstraint"></td>
        </tr>
</table>

    <div class="bx-rpm-buttons bx-footer left" id="buttons">
        <button name="create" class="bx-button action"  id="saveButton">Save</button>
        <button name="cancel" class="bx-button action" id="cancelButton" onclick="javascript:$('#createAttributeWindow').data('tWindow').destroy();">Cancel</button>
    </div>  
</div>  

<script type="text/javascript">
    var inUse = @Model.inUse.ToString().ToLower();

    $(function () {
        var options = $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select option');
        for(var i = 0; i < options.length; i++){
            if($(options[i]).text().toLowerCase() == 'none'){
                var select = $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select');
                select.val($(options[i]).attr('value')).change();
                unitChange(select.val());
                break;
            }
        }
        $('.bx-rpm-createAttributeContainer #constraints').toggle();

        $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select').change(function () {
            unitChange($(this).val());
        });
    });

    function clickConstraints(){
        $('.bx-rpm-createAttributeContainer #openconstraints').toggleClass('bx-angle-double-down');
        $('.bx-rpm-createAttributeContainer #openconstraints').toggleClass('bx-angle-double-up');
        if(!($('.bx-rpm-createAttributeContainer .bx-rpm-rangeConstraint').hasClass('loaded') && $('.bx-rpm-createAttributeContainer .bx-rpm-patternConstraint').hasClass('loaded') && $('.bx-rpm-createAttributeContainer .bx-rpm-domainConstraint').hasClass('loaded'))){
            $.get('@Url.Action("_getRangeConstraint", "DataStructureEdit", new { area = "RPM"} )', function (data) {
                $('.bx-rpm-createAttributeContainer .bx-rpm-rangeConstraint').html(data);
                $('.bx-rpm-createAttributeContainer .bx-rpm-rangeConstraint').addClass('loaded');
                $.get('@Url.Action("_getPatternConstraint", "DataStructureEdit", new { area = "RPM"} )', function (data) {
                    $('.bx-rpm-createAttributeContainer .bx-rpm-patternConstraint').html(data);
                    $('.bx-rpm-createAttributeContainer .bx-rpm-patternConstraint').addClass('loaded');
                    $.get('@Url.Action("_getDomainConstraint", "DataStructureEdit", new { area = "RPM"} )', function (data) {
                        $('.bx-rpm-createAttributeContainer .bx-rpm-domainConstraint').html(data);
                        $('.bx-rpm-createAttributeContainer .bx-rpm-domainConstraint').addClass('loaded');
                        $('.bx-rpm-createAttributeContainer #constraints').toggle();
                        $('#createAttributeWindow').data('tWindow').center();
                    });
                });
            });
        }
        else{
            $('.bx-rpm-createAttributeContainer #constraints').toggle();
            $('#createAttributeWindow').data('tWindow').center();
        }
    }

    //$('.bx-rpm-createAttributeContainer #name').keyup(function () {
    //    createAttrWondowValidateName('message');
    //});

    //$('.bx-rpm-createAttributeContainer #name').change(function () {
    //    createAttrWondowValidateName('message');
    //});

    //$('.bx-rpm-createAttributeContainer #description').keyup(function () {
    //    createAttrWondowShowmessage()
    //});

    //$('.bx-rpm-createAttributeContainer #description').change(function () {
    //    createAttrWondowShowmessage()
    //});

    //$('.bx-rpm-createAttributeContainer #unit').change(function () {
    //    createAttrWondowShowmessage()
    //});

    //$('.bx-rpm-createAttributeContainer #dataType').change(function () {
    //    createAttrWondowShowmessage()
    //});

    function createAttrWondowValidateName(cssId) {
        var parameters = encodeURI('/?Id=' + $('.bx-rpm-createAttributeContainer #id').val() + '&Name=' + encodeURIComponent($('.bx-rpm-createAttributeContainer #name').val()) + '&cssId=' + cssId);
        parameters = parameters.replace('#','%23');
        $.get('@Url.Action("_validateAttributeName", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
            $(data).replaceAll('.bx-rpm-createAttributeContainer #' + cssId);
            createAttrWondowShowmessage();
        });
    }

    function createAttrWondowShowmessage() {
        var hasMessage = false;
        for (var i = 0; i < $('.bx-rpm-createAttributeContainer .bx-rpm-message').length; i++) {
            if ($('.bx-rpm-createAttributeContainer .bx-rpm-message')[i].getAttribute('value').toLowerCase() == 'true') {
                hasMessage = true;
                break;
            }
            if ($('.bx-rpm-createAttributeContainer .bx-rpm-message')[i].getAttribute('value').toLowerCase() == 'none') {
                hasMessage = 'none';
                break;
            }
        }

        if (hasMessage == true) {
            //$('.bx-rpm-createAttributeContainer #saveButton').attr('disabled', 'disabled');
            $(".bx-rpm-createAttributeContainer #messageContainer").removeClass('hidden');
            //$('.bx-rpm-createAttributeContainer #saveButton').addClass('bx-disabled');
        }
        else if(hasMessage == false){
            //$('.bx-rpm-createAttributeContainer #saveButton').removeAttr('disabled');
            $(".bx-rpm-createAttributeContainer #messageContainer").addClass('hidden');
            //$('.bx-rpm-createAttributeContainer #saveButton').removeClass('bx-disabled');
        }
    }
    $('.bx-rpm-function #addUnit').click(function () {
        $('.unit .bx-rpm-selectdropdown').toggle();
        $('.unit .bx-rpm-partial').toggle();
        $('#datatype').toggle();
        $('.bx-rpm-function #addUnit').toggleClass('bx-add');
        $('.bx-rpm-function #addUnit').toggleClass('bx-close');
        $('#createAttributeWindow').data('tWindow').center();
    });

    $('.bx-rpm-createAttributeContainer #saveButton').click(function () {
        var cssId = 'message';
        var parameters = encodeURI('/?Id=' + $('.bx-rpm-createAttributeContainer #id').val() + '&Name=' + encodeURIComponent($('.bx-rpm-createAttributeContainer #name').val()) + '&Description=' + encodeURIComponent($('.bx-rpm-createAttributeContainer #description').val()) + '&unitId=' + $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select').val() + '&dataTypeId=' + $('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select').val() + '&cssId=' + cssId + '&inUse=' + inUse);
        parameters = parameters.replace('#','%23');
        $.get('@Url.Action("createAtttribute", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
            if ($(data).hasClass('bx-rpm-message') && $(data).attr('id') == cssId) {
                $(data).replaceAll('.bx-rpm-createAttributeContainer #' + $(data).attr('id'));
                createAttrWondowShowmessage($(data).attr('value').toLowerCase());
            }
            else if ($(data).hasClass('bx-rpm-message') && $(data).attr('id') == 'refresh') {
                storeRangeConstraint($(data).text());
                storePatternConstraint($(data).text());
                storeDomainConstraint($(data).text());
                if($('.bx-rpm-attribute-functions').length >0) {
                    $('.bx-rpm-attribute-functions #addAttribute').attr('value', $(data).text());
                    $('.bx-rpm-attribute-functions #addAttribute').trigger('click');
                }
                $("#createAttributeWindow").data('tWindow').destroy();
            }
        });
    });

    

    function unitChange(value) {
        var parameters = encodeURI('/?unitId=' + parseInt(value));
        $.get('@Url.Action("_getDataTypes", "DataStructureEdit", new { area = "RPM"} )' + parameters, function (data) {
            for (var i = 0; i < $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select option').length; i++) {
                if ($('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select option')[i].getAttribute('value') == value) {
                    $('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #description').html($('.bx-rpm-createAttributeContainer .unit .bx-rpm-selectdropdown #select option')[i].getAttribute('title'));
                }
            }
            $('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown').html($(data));

            $('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select').change(function () {
                dataTypeChange($(this).val());
            });

            dataTypeChange($('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select').val());
        });
    }

    function dataTypeChange(value) {
            for (var i = 0; i < $('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select option').length; i++) {
                if ($('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select option')[i].getAttribute('value') == value) {
                    $('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #description').html($('.bx-rpm-createAttributeContainer .datatype .bx-rpm-selectdropdown #select option')[i].getAttribute('title'));
                }
            }
    }

    function onRangeChange() {
        if (parseInt($('.bx-rpm-rangeConstraint #range_min').val()) > parseInt($('.bx-rpm-rangeConstraint #range_max').val())) {
            $('.bx-rpm-rangeConstraint #errorMsg').removeClass('hidden');
            $('.bx-rpm-rangeConstraint #errorMsg').attr('value', true);
            $('.bx-rpm-rangeConstraint #errorMsgText').text('Invalid Constraint Max must be greater/equals than Min.');
        }
        else if (isNaN($('.bx-rpm-rangeConstraint #range_min').val()) || isNaN($('.bx-rpm-rangeConstraint #range_max').val())){
            $('.bx-rpm-rangeConstraint #errorMsg').removeClass('hidden');
            $('.bx-rpm-rangeConstraint #errorMsg').attr('value', true);
            $('.bx-rpm-rangeConstraint #errorMsgText').text('Min/Max must be a Number');
        }
        else {
            $('.bx-rpm-rangeConstraint #errorMsg').addClass('hidden');
            $('.bx-rpm-rangeConstraint #errorMsg').removeAttr('value');
            $('.bx-rpm-rangeConstraint #errorMsgText').text('');
        }


        var invert = false;
        var mininclude = true;
        var maxinclude = false;
        if ($('.bx-rpm-rangeConstraint #range_invert').is(":checked")) {
            invert = true;
        }
        else
        {
            invert = false;
        }

        if ($('.bx-rpm-rangeConstraint #range_mininclude').is(":checked")) {
            mininclude = true;
        }
        else {
            mininclude = false;
        }

        if ($('.bx-rpm-rangeConstraint #range_maxinclude').is(":checked")) {
            maxinclude = true;
        }
        else {
            maxinclude = false;
        }

        var variables = '?invert=' + invert + '&min=' + $('.bx-rpm-rangeConstraint #range_min').val() + '&max=' + $('.bx-rpm-rangeConstraint #range_max').val() + '&mininclude=' + mininclude + '&maxinclude=' + maxinclude;
        $.getJSON('/RPM/DataStructureEdit/getRangeConstraintFormalDescription/' + variables, function (data) {
            $('.bx-rpm-rangeConstraint #range_FormalDescription').attr("title",data);
        });
        createAttrWondowShowmessage();;
    }

    function onPatternChange(){

        if ($('#pattern_invert').is(":checked")) {
            $('#pattern_invert').val(true)
        }
        else
        {
            $('#pattern_invert').val(false)
        }

        var variables = '?invert=' + $('#pattern_invert').val() + '&phrase=' + $('#pattern_phrase').val();

        $.getJSON('/RPM/DataStructureEdit/getPatternConstraintFormalDescription/' + variables, function (data) {
            $('#pattern_FormalDescription').attr("title", data);
        });
    }

    function onDomainChange() {

        if ($('#domain_invert').is(":checked")) {
            $('#domain_invert').val(true)
        }
        else
        {
            $('#domain_invert').val(false)
        }

        var variables = '?invert=' + $('#domain_invert').val() + '&Terms=' + $('#domain_terms').val();

        $.getJSON('/RPM/DataStructureEdit/getDomainConstraintFormalDescription/' + variables, function (data) {
            $('#domain_FormalDescription').attr("title", data);
        });
    }

    function restRange(item)
    {
        item = $(item).parents('.bx-rpm-constrainTable');
        $(item).find('#range_invert').val(false);
        $(item).find('#range_invert').prop('checked', false);

        $(item).find('#range_mininclude').val(true);
        $(item).find('#range_mininclude').prop('checked', true);

        $(item).find('#range_maxinclude').val(false);
        $(item).find('#range_maxinclude').prop('checked', false);

        $(item).find('#range_min').val(0);
        $(item).find('#range_max').val(0);
        $(item).find('#range_desc').val("");
        onRangeChange();
    }

    function restPattern(item)
    {
        item = $(item).parents('.bx-rpm-constrainTable');
        $(item).find('#pattern_invert').val(false);
        $(item).find('#pattern_invert').prop('checked', false);

        $(item).find('#pattern_phrase').val("");
        $(item).find('#pattern_desc').val("");
    }

    function resetDomain(item)
    {
        item = $(item).parents('.bx-rpm-constrainTable');
        $(item).find('#domain_invert').val(false);
        $(item).find('#domain_invert').prop('checked', false);

        $(item).find('#domain_terms').val("");
        $(item).find('#domain_desc').val("");
    }

    function storeRangeConstraint(attributeId) {
        for (var i = 0; i < $('.bx-rpm-rangeConstraint').length; i++) {
            var constraintModel = {
                Negated: $('.bx-rpm-rangeConstraint').find('#range_invert').is(':checked'),
                min: $('.bx-rpm-rangeConstraint').find('#range_min').val(),
                max: $('.bx-rpm-rangeConstraint').find('#range_max').val(),
                MinInclude: $('.bx-rpm-rangeConstraint').find('#range_mininclude').is(':checked'),
                MaxInclude: $('.bx-rpm-rangeConstraint').find('#range_maxinclude').is(':checked'),
                Description: $('.bx-rpm-rangeConstraint').find('#range_desc').val(),
                Id: $('.bx-rpm-rangeConstraint').find('#range_id').val(),
                AttributeId: attributeId
            };
            constraintModel = {constraintModel: constraintModel}
            $.ajax({
                url: '/RPM/DataStructureEdit/storeRangeConstraint',
                type: 'POST',
                data: JSON.stringify(constraintModel),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {

                },
                success: function (result) {

                },
                async: false,
                processData: false
            });
        }
    }

    function storePatternConstraint(attributeId) {
        for (var i = 0; i < $('.bx-rpm-patternConstraint').length; i++) {
            var constraintModel = {
                Negated: $('.bx-rpm-patternConstraint').find('#pattern_invert').is(':checked'),
                MatchingPhrase: $('.bx-rpm-patternConstraint').find('#pattern_phrase').val(),
                Description: $('.bx-rpm-patternConstraint').find('#pattern_desc').val(),
                Id: $('.bx-rpm-patternConstraint').find('#pattern_id').val(),
                AttributeId: attributeId
            };
            constraintModel = {constraintModel: constraintModel}
            $.ajax({
                url: '/RPM/DataStructureEdit/storePatternConstraint',
                type: 'POST',
                data: JSON.stringify(constraintModel),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {

                },
                success: function (result) {

                },
                async: false,
                processData: false
            });
        }
    }

    function storeDomainConstraint(attributeId) {
        for (var i = 0; i < $('.bx-rpm-domainConstraint').length; i++) {
            var constraintModel = {
                Negated: $('.bx-rpm-domainConstraint').find('#domain_invert').is(':checked'),
                Terms: $('.bx-rpm-domainConstraint').find('#domain_terms').val(),
                Description: $('.bx-rpm-domainConstraint').find('#domain_desc').val(),
                Id: $('.bx-rpm-domainConstraint').find('#domain_id').val(),
                AttributeId: attributeId
            };
            constraintModel = {constraintModel: constraintModel}
            $.ajax({
                url: '/RPM/DataStructureEdit/storeDomainConstraint',
                type: 'POST',
                data: JSON.stringify(constraintModel),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {

                },
                success: function (result) {

                },
                async: false,
                processData: false
            });
        }
    }
</script>