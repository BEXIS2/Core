@using Telerik.Web.Mvc.UI
@using System.Collections.Generic;
@using BExIS.Modules.Rpm.UI.Models
@model BExIS.Modules.Rpm.UI.Models.AttributeFilterModel

@{ 
    string appearance = "";
    string cssId = "";
    int count = 0;
}

<div class="bx-rpm-filterContainer" id="filterContainer">
    @foreach (KeyValuePair<string, AttributeFilterStruct> afd in Model.AttributeFilterDictionary)
    {
        <div class="bx-rpm-filterCategory">
            <label>@afd.Key</label>

            @foreach (KeyValuePair<string, FilterValueStruct> fvs in afd.Value.Values)
            {
                appearance = "";
                foreach (long l in fvs.Value.Appearance)
                {
                    if (l == fvs.Value.Appearance.First())
                    {
                        appearance = l.ToString();
                    }
                    else
                    {
                        appearance += " " + l.ToString();
                    }
                }
                <div class="bx-rpm-filterItem"> @{cssId = count + "_" + afd.Key.ToLower().Replace(" ","");}
                    <input class = "bx-rpm-filterCheckbox" type="checkbox" id="@cssId" appearance="@appearance" /> @{cssId += "_label"; }              
                    <span  class = "bx-rpm-filterCheckboxLable"id="@cssId">@fvs.Value.Name @{cssId += "_count"; }
                        <span id="@cssId">(@fvs.Value.Appearance.Count)</span>
                    </span>
                </div>
                count++;
            }
        </div>
    }
</div>

<script type="text/javascript">

    function setFilter(checkbox) {
        if ($(checkbox).hasClass('checked')) {
            $(checkbox).removeClass('checked');
            $(checkbox).removeAttr('checked');
        }
        else {
            $(checkbox).addClass('checked');
            $(checkbox).attr('checked', 'checked');
        }
        disableCheckboxes(setFilterArray());
        return setFilterArray();
    }

    function disableCheckboxes(tempFilter) {
        for (i = 0; i < $('.bx-rpm-filterCheckbox').length; i++) {
            var id = $('.bx-rpm-filterCheckbox')[i].getAttribute('id');
            var appearance = $('#' + id).attr('appearance').split(' ');
            var count = 0;

            if (tempFilter.length > 0) {
                for (j in tempFilter) {
                    if (inArray(tempFilter[j], appearance)) {
                        count++;
                    }
                }
                if (count > 0) {
                    $('#' + id).parent('.bx-rpm-filterItem').removeClass('hidden');
                    $('#' + id).removeClass('disabled');
                    $('#' + id).removeAttr('disabled', 'disabled');
                    $('#' + id + '_label').removeClass('disabled');
                    $('#' + id + '_label_count').html('(' + count + ')');
                }
                else {
                    $('#' + id).parent('.bx-rpm-filterItem').addClass('hidden');
                    $('#' + id).addClass('disabled');
                    $('#' + id).attr('disabled', 'disabled');
                    $('#' + id + '_label').addClass('disabled');
                    $('#' + id + '_label_count').text('(' + count + ')');
                }

            }
            else {
                $('#' + id).parent('.bx-rpm-filterItem').removeClass('hidden');
                $('#' + id).removeClass('disabled');
                $('#' + id).removeAttr('disabled', 'disabled');
                $('#' + id + '_label').removeClass('disabled');
                $('#' + id + '_label_count').text('(' + appearance.length + ')');
            }
        }
    }

    function setFilterArray() {
        var tempFilter = [];
        if ($('.checked').length > 0) {
            if ($('.checked').length > 1) {
                for (i = 0; i < $('.checked').length; i++) {

                    if (i < $('.checked').length - 1) {
                        var offset = i + 1;
                    }
                    else {
                        var offset = 0;
                    }

                    var id = $('.checked')[i].getAttribute('id');
                    var offsetId = $('.checked')[offset].getAttribute('id');
                    var appearance = $('#' + id).attr('appearance').split(' ');
                    var offsetAppearance = $('#' + offsetId).attr('appearance').split(' ');
                    for (j in appearance) {
                        if (inArray(appearance[j], offsetAppearance)) {
                            if (!inArray(appearance[j], tempFilter)) {
                                tempFilter.push(appearance[j]);
                                tempFilter.sort();
                            }
                        }
                        else {
                            if (inArray(appearance[j], tempFilter)) {
                                tempFilter.splice(tempFilter.indexOf(appearance[j]), 1);
                                tempFilter.sort();
                            }
                        }
                    }
                }
            }
            else {
                tempFilter = $('.checked').attr('appearance').split(' ');
                tempFilter.sort();
            }
        }
        else {
            tempFilter = "";
        }
        return tempFilter;
    }

    function inArray(value, array) {
        for (prop in array) {
            if (value == array[prop]) {
                return true;
            }
        }
        return false;
    }
</script>