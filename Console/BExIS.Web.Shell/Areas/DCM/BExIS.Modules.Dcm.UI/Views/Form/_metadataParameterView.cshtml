@model BExIS.Modules.Dcm.UI.Models.Metadata.MetadataParameterModel
@using BExIS.Modules.Dcm.UI.Models
@using BExIS.Utils.WebHelpers
@using System.Text.RegularExpressions
@using BExIS.Modules.Dcm.UI.Models.Metadata
@{
    string id = Model.Id + "_" + Model.Parent.Id + "_" + Model.AttributeNumber + "_" + Model.ParentModelNumber + "_" + Model.NumberOfSourceInPackage + "_" + Model.ParentStepId;
    string idByXpath = ((string)ViewData["Xpath"]).Replace("//", "_").Replace('[', '_').Replace(']', '_') + Model.DisplayName + "_" + Model.NumberOfSourceInPackage;  // Replace special character by underscore
    string xpath = ((string)ViewData["Xpath"]) + "//" + Model.DisplayName + "[1]//" + Model.MetadataParameterName + "[" + Model.NumberOfSourceInPackage + "]";
    string idInput = id + "_Input";

    string displayName = "";

    // Add before every uppercase word empty space (e.g. LastNameTEST -> Last Name TEST)
    displayName = Regex.Replace(Model.DisplayName, "((?<=[a-z])[A-Z])", " $1");

    // split at " "
    string[] wordList = displayName.Split(new char[0]);

    // lowercase all words, except of uppercase abbreviations (e.g. URL)
    for (int i = 0; i < wordList.Length; i++)
    {
        if (wordList[i].ToUpper() != wordList[i])
        {
            wordList[i] = wordList[i].ToLower();
        }
    }

    displayName = String.Join(" ", wordList);

    // Make first char uppercase
    displayName = char.ToUpper(displayName[0]) + displayName.Substring(1).Replace("_", " ");
    bool locked = false;

    if (ViewData.ContainsKey("locked"))
    {
        locked = (bool)ViewData["locked"];
    }

    UIComponentModel uiComponentModel = new UIComponentModel(MetadataAttrType.Parameter)
    {
        IdByXpath = idByXpath,
        IdInput = idInput,
        Value = Model.Value,
        SystemType = Model.SystemType,
        Locked = locked,
        DisplayName = displayName,
        DomainList = Model.DomainList,
        DisplayPattern = Model.DisplayPattern,
        Discription = Model.Discription,
        ParentId = Model.Parent.Id
    };
}



<div class="bx-parameter-label">

    @if (Model.MinCardinality > 0)
    {
        <b title="This field is required" style="color:red">*</b>
        <b title="@Model.Discription">@displayName</b>
    }
    else
    {
        <span title="@Model.Discription">@displayName</span>
    }

</div>
<div class="bx-paremeter-input">


    @if (Model.SystemType.Equals(TypeCode.String.ToString()))
    {
        if (locked)
        {
            <div class="bx-input bx-disabled bx-disabled-parameter">
                @if (Model.Value != null)
                {
                    @Html.DisplayWithLinksFor(m => m.Value)
                }
            </div>
        }
        else
        {
            if (Model.DomainList.Count > 0) // dropdown
            {
                uiComponentModel.OnChangeAction = "OnChangeParameterDropDown";
                @Html.Partial("_list", uiComponentModel)

            }
            else // input
            {
                string value = "";
                if (@Model.Value != null) { value = @Model.Value.ToString();}

                <input class="bx-input" id="@idInput" idbyxpath="@idByXpath" name="@idInput" title="" value="@value" xpath="@xpath" onchange="OnChangeParameter(this)" />
            }
        }
    }

    @if (Model.SystemType.Equals(TypeCode.Int32.ToString()) ||
                Model.SystemType.Equals(TypeCode.Int64.ToString()) ||
                Model.SystemType.Equals(TypeCode.Int16.ToString()) ||
                Model.SystemType.Equals(TypeCode.UInt16.ToString()) ||
                Model.SystemType.Equals(TypeCode.UInt32.ToString()) ||
                Model.SystemType.Equals(TypeCode.UInt64.ToString()))
    {
        @Html.Partial("_integer", uiComponentModel)
    }

    @if (Model.SystemType.Equals(TypeCode.Decimal.ToString()) ||
            Model.SystemType.Equals(TypeCode.Double.ToString()) ||
            Model.SystemType.Equals(TypeCode.Single.ToString()))
    {
        @Html.Partial("_number", uiComponentModel)
    }

    @if (Model.SystemType.Equals(TypeCode.Boolean.ToString()))
    {
        @Html.Partial("_bool", uiComponentModel)
    }

    @if (Model.SystemType.Equals(TypeCode.DateTime.ToString()))
    {
        @Html.Partial("_date", uiComponentModel)
    }


</div>
<div>
    @if (!string.IsNullOrEmpty(Model.Discription))
    {
        <button type="button" title="@Html.Raw(Regex.Replace(Model.Discription, "<(.|\\n)*?>", string.Empty))" class="bx-function bx-disabled bx-info fa fa-info" onclick="showHelp('help_@idInput');"></button>
    }
</div>



