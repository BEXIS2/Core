@model BExIS.Modules.Dcm.UI.Models.SelectVerificationModel
@using Telerik.Web.Mvc.UI;
@using Telerik.Web.Mvc.Resources;
@using BExIS.Modules.Dcm.UI.Models;
@using BExIS.Dlm.Entities.DataStructure;


<div id="Step5" class="uploadWizardStep">

    <div class="uploadWizardStep_Main">
        <div class="uploadWizardStep_Header stepper">
            <h3>@Model.StepInfo.title</h3>
        </div>

        <div class="uploadWizardStep_Description stepper">
          
        </div>

        <div class="uploadWizardStep_Content stepper" style="height: inherit; width: 800px;">
            <table>
                <thead>
                    <tr>
                        <th class="first-header">Variable name</th>
                        <th class="first-header">Datatype</th>
                        <th class="first-header">Unit</th>
                        <th class="first-header">Means</th>
                    </tr>
                    <tr>
                        <th class="second-header">The variable [Name]</th>
                        <th class="second-header">is of [Datatype]</th>
                        <th class="second-header">has [Unit]</th>
                        <th class="second-header">and means [Attribute]</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in Model.Rows)
                    {
                        @Html.Partial("Row", row);
                    }
                </tbody>
            </table>
        </div>

        <div style="float:left; padding-top: 10px">
            <button id="validateBtn" onClick="validateData(this)" class="t-button action" title="Validate Selection">Validate</button>
        </div>

    </div>

    <div class="uploadWizardStep_Error stepper">
        @if (Model != null && Model.ErrorList != null && Model.ErrorList.Count != 0)
        {
            <ul>
                @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList)
                {
                    <li>@s.ToString()</li>
                }
            </ul>
        }
    </div>
</div>

<style>

    .first-header {
        min-width:150px;
        border-bottom:none;
    }

    .second-header {
        font-size: 12px;
        border-top: 1px solid;
    }

    .fa-exclamation-triangle {
        color: darkorange;
    }

    .fa-check {
        color: green;
    }
</style>

<script type="text/javascript">

    function validateData(button) {
        //Hide the results of previous validation attempts
        $(button).closest('tr').find('i').prop('title', "");

        //Show a spinner - making sure the button is not resized by setting min-width and -height
        var oldHtml = $(button).html();
        var curWidth = $(button).outerWidth();
        var curHeight = $(button).outerHeight();
        $(button).css({
            "min-width": curWidth.toString() + "px",
            "min-height": curHeight.toString() + "px"
        });
        $(button).html('<i class="fa fa-spinner fa-spin fa-fw"></i><span class="sr-only">Loading...</span>');

        $.post('@Url.Action("ValidateSelection", "EasyUploadVerification", new RouteValueDictionary { { "area", "DCM" } })', {}, function (response) {
            //Restore old button content
            $(button).html(oldHtml);

            //Remove all old icons, they are added while parsing the errors
            $('td > i').each(function () {
                $(this).removeClass("fa-exclamation-triangle");
                $(this).removeClass("fa-check");
            });

            //See if there are errors, display them or display a check mark
            if (response.errors.length > 0) {
                for (var i = 0; i < response.errors.length; i++) {
                    var error = response.errors[i];
                    //var VariableName = error.VariableName;
                    //var TitleCell = $('td[varName="' + VariableName + '"] > i');
                    var TitleCell = $('td[index="' + error.Item1 + '"] > i');

                    //Show a warning sign, hide check marks if they were visible before
                    TitleCell.removeClass("fa-check");
                    TitleCell.addClass("fa-exclamation-triangle");

                    if (TitleCell.is(":visible")) {
                        var currentTitle = TitleCell.attr("title");
                        var currentErrorCount = currentTitle.split("\n").length;

                        if (currentErrorCount < 50) {
                            TitleCell.attr("title", currentTitle + "\n\"" + error.Item2.Value + "\" is not valid as " + error.Item2.DataType);
                        }
                        if (currentErrorCount == 50) {
                            TitleCell.attr("title", currentTitle + "\n\"" + error.Item2.Value + "\" is not valid as " + error.Item2.DataType);
                            TitleCell.attr("title", currentTitle + "\nand more...");
                        }
                    } else {
                        TitleCell.show();
                        TitleCell.attr("title", "\"" + error.Item2.Value + "\" is not valid as " + error.Item2.DataType);
                    }
                }
                //Show check marks for all Title cells that did not receive an error
                $('td > i').each(function () {
                    if ( !$(this).hasClass("fa-exclamation-triangle") ) {
                        $(this).addClass("fa-check");
                    }
                    if ( !$(this).is(":visible") ) {
                        $(this).show();
                    }
                });
            } else {
                //No errors so show a check-mark for all title cells
                $('td > i').each(function () {
                    $(this).addClass("fa-check");
                });
            }
        });
    }

    $(document).ready(function () {

        //Destroy the handsontable from the last step because it's causing performance problems
        if (hotActive) {
            hot.destroy();
            hotActive = false;
        }

    });

    function change(e){

   
            var index = 0;
            var selectedUnit = 0;
            var selectedDataType = 0;
            var selectedAttribute = 0;
            var varName = "";

            //set unit id
            console.log($(e).attr("name"));

            //console.log($(e).parents("tr.eu-row"));

            var parent = $(e).parents("tr.eu-row")[0]

            var dataTypeContainer = $(parent).find('select.datatype');
            var unitContainer = $(parent).find('select.unit');
            var dataAttrContainer = $(parent).find('select.dataattribute');
            var lastSelection = $(e).attr("name");

            selectedDataType = $($(dataTypeContainer).find(":selected")[0]).val();
            selectedUnit = $($(unitContainer).find(":selected")[0]).val();
            selectedAttribute = $($(dataAttrContainer).find(":selected")[0]).val();
            varName = $($(parent).find(".name")[0]).attr("varName");
            index = $($(parent).find(".name")[0]).attr("index");

            //console.log(selectedDataType);
            //console.log(selectedUnit);
            //console.log(selectedAttribute);
            //console.log(varName);
            //console.log(index);

            $(parent).find(".preloader").each(function () {
                $(this).preloader(12,".");
            })


            $.post('@Url.Action("SaveSelection", "EasyUploadVerification", new RouteValueDictionary { { "area", "DCM" } })', {
                index,
                selectedUnit,
                selectedDataType,
                selectedAttribute,
                varName,
                lastSelection

            }, function (response) {


                //console.log("back from server");
                //console.log(response);
                //console.log(parent);

                $(parent).replaceWith(response);
            });


        }


    //Necessary to trigger onChange even when the same option is selected again
    function deselect(select) {
        $(select).data('storedIndex', select.selectedIndex);
        select.selectedIndex = -1;
    }

    //Necessary to restore the previously selected option in case the user opens the dropdown and closes without selecting
    function reselect(select) {
        if (select.selectedIndex === -1) {
            select.selectedIndex = $(select).data('storedIndex');
        }
    }



</script>