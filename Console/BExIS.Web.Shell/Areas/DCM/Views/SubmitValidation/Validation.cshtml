@model BExIS.Modules.Dcm.UI.Models.ValidationModel

@{
    List<Tuple<string, int, string>> SortedErrors = new List<Tuple<string, int, string>>();

    if (ViewData["SortedValueErrors"] != null)
    {
        SortedErrors = (List<Tuple<string, int, string>>)ViewData["SortedValueErrors"];
    }

}


<div id="StepValidation" class="uploadWizardStep">
    <div class="uploadWizardStep_Main">
        <div class="uploadWizardStep_Header stepper">
            <h3>@Model.StepInfo.title</h3>
        </div>

        <div class="uploadWizardStep_Description stepper">
            <p>
                With this step the selected data file is validated against the selected data structure.
                Both, the structure of the data (e.g. variable properties) and whether the data values
                fit to the specified structure (e.g. data type, value range) is evaluated.

            </p>
        </div>

        <div class="uploadWizardStep_Content stepper">
            <table>
                <tr>
                    <td><button id="validationButton" title="Validate selected data file against a given data structure" class="function">Validate</button></td>
                    <td>Validate selected data file against a given data structure.</td>
                </tr>
            </table>
        </div>
    </div>

    <div class="uploadWizardStep_Success stepper">
        @if (Model.Validated)
        {

            <p>Successfully validated.</p>

        }
    </div>

    <div class="uploadWizardStep_Error stepper">
        @if (Model != null)
        {
            if (Model.ErrorList != null)
            {
                if (Model.ErrorList.Count == 0)
                {


                }
                else
                {
                    if (Model.ErrorList.Count >= 1000)
                    {
                        <p>The validation was canceled because up to 1000 errors were found.  <br /> Please check the file or the datastructure and try again.</p>

                    }

                    if (SortedErrors != null && SortedErrors.Count>0)
                    {
 
                        <!-- value errors -->
                        foreach (var e in SortedErrors)
                        {
                            string message = String.Format("In the column {0} there are {1} errors. the message is : {2}", e.Item1, e.Item2.ToString(), e.Item3);
                            string toggleId = e.Item1 + "Toggle";
                            string toggleObj = e.Item1 + "Div";

                            <div>
                                <b><span id="@toggleId" varname="@e.Item1" Toggle" class="fa fa-expand toogle-error-message"></span> @message </b>
                                <div id="@toggleObj" style="display:none">
                                    <ul>
                                        @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList.Where(x => x.getName().Equals(e.Item1) && x.GetMessage().Equals(e.Item3)))
                                        {
                                            <li>@s.ToString()</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                            <br />
                        }
                    }
                    else
                    {

                        <ul>
                            @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList)
                            {
                                <li>@s.ToString()</li>
                            }
                        </ul>
          
                    }

                }
            }

        }
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {

        $('#validationButton').click(function () {

            $('.uploadWizardStep').preloader(16, "Validate data.");

            $.post('@Url.Action("ValidateFile", @Model.StepInfo.PostActionInfo.ControllerName, new RouteValueDictionary { { "area", "DCM" } })', function (response) {

                $('.uploadWizardStep_Error').empty();
                $('.uploadWizardStep').replaceWith(response);


            });
        });

        $(".toogle-error-message").click(function()
        {
            var vn = $(this).attr("varname")
            console.log(vn);
            var d = vn + "Div";
            $(this).toggleClass("fa-compress", "fa-expand");
            $("#"+d).toggle();

        })
    })



</script>

