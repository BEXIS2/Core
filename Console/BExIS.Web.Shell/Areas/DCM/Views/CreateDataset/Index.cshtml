@model BExIS.Modules.Dcm.UI.Models.CreateDataset.SetupModel
@using BExIS.Modules.Dcm.UI.Models.CreateDataset;

@using BExIS.Modules.Dcm.UI.Models
@using Telerik.Web.Mvc.UI
@using BExIS.Utils.Extensions

@{
    List<ListViewItem> DatasetsList = new List<ListViewItem>();
    DatasetsList.Insert(0, new ListViewItem(-1, "New Dataset"));

    foreach (ListViewItem item in Model.DatasetViewList)
    {
        DatasetsList.Add(item);
    }
}

<div id="SetupContainer">
    @section Information
    {
        This wizard helps you to create a new dataset. There are two options: (1) create a new dataset or (2) create a dataset based on an existing dataset.
            <br />
            (1) Please select “New dataset”, choose the data type (tabular data or file) as new or based on an exiting, and the metadata structure (e.g. BE-MetadataSchema).
            <br />
            (2) Select a dataset as a template to reuse its metadata and data structure.
            <p>
                <a href="/DCM/Help/Index/#_Toc434570841" class="bx-informationLink" title="go to help" target="_blank">More</a>
            </p>
        <p>
            <a href="/DCM/Help/Index/#_Toc434570841" class="bx-informationLink" title="go to help" target="_blank">More</a>
        </p>
    }

    @Html.ValidationSummary(true)

    <p>Please provide the following information.</p>
    @using (Html.BeginForm("StoreSelectedDatasetSetup", "CreateDataset", FormMethod.Post))
    {
        <table>
            <tr>
                <td style="width: 300px;">
                    @Html.LabelFor(m => m.SelectedDatasetId)
                </td>
                <td style="width: 60px;">
                   

                    @*@Html.Partial("_EnititySelectorView", BexisModelManager.LoadEntitySelectorModel<ListViewItem>(Model.DatasetViewList,"Id","myTest"))*@
                </td>
                <td style="width: 400px;">
                    @if (Model.BlockDatasetId)
                    {
                        string title = Model.DatasetViewList.Where(ms => ms.Id.Equals(Model.SelectedDatasetId)).FirstOrDefault().Title;
                        @Html.HiddenFor(m => m.SelectedDatasetId)
                        @Html.Label(title)

                    }
                    else
                    {
                        @(Html.Telerik().DropDownList()
                          .Name("SelectedDatasetId")
                          .SelectedIndex(0)
                          .HtmlAttributes(new { title = "Select a Dataset as Template", @class = "bx-dropdown" })
                          .BindTo(new SelectList(DatasetsList, "Id", "Title", Model.SelectedDatasetId))
                          .ClientEvents(events =>
                          {
                              events.OnChange("datasetChange");
                          })
                        )


                    }

                    <div id="datasetsContainer">
                        @Ajax.ActionLink("Select from table", "ShowListOfDatasets", "CreateDataset", new { title = "Select a Dataset as Template" },
          new AjaxOptions
          {
              HttpMethod = "GET",
              InsertionMode = InsertionMode.Replace,
              UpdateTargetId = "datasetWindowContainer"
          },
          new { @class = "bx-button function", @style = "float:right", title = "Select a Dataset as Template" })
                    </div>
                    <div id="datasetWindowContainer"></div>
                </td>
                <td>
                    @Html.ValidationMessageFor(m => m.SelectedDatasetId)
                </td>
            </tr>
            <tr>
                <td style="width: 300px;">
                    @Html.LabelFor(m => m.SelectedDataStructureId) <span class="bx bx-required" title="Required"></span>
                </td>
                <td></td>
                <td>
                    @{  string show_div_structured = "style=display:none";
                        string show_div_unstructured = "style=display:none";
                        var option = DataStructureOptions.CreateNewStructure;
                    }
                    @foreach (var item in Model.DataStructureViewList_structured)
                    {
                        if (Model.SelectedDataStructureId == item.Id)
                        {
                            show_div_structured = "style=\"display: none\"";
                            option = DataStructureOptions.Existing_structured;
                        }
                    }
                    @foreach (var item in Model.DataStructureViewList_unstructured)
                    {
                        if (Model.SelectedDataStructureId == item.Id)
                        {
                            show_div_unstructured = "style=\"display: none\"";
                            option = DataStructureOptions.Existing_unstructured;
                        }
                    }


                    @foreach (DataStructureOptions dsoptions in Enum.GetValues(typeof(DataStructureOptions)))
                    {
                        var id = TagBuilder.CreateSanitizedId(string.Format("{0}_{1}_{2}", "rdbtn", typeof(DataStructureOptions), dsoptions));
                        <div>
                            @Html.RadioButtonFor(s => s.DataStructureOptions, dsoptions, dsoptions == option ? new { @checked = "checked" } : null)
                            @Html.Label(dsoptions.GetDisplayName(), new { @for = id })
                        </div>
                    }


                    <div class="datastructuresSelect" @show_div_structured>

                        @if (Model.BlockDatastructureId)
                        {
                            string title = Model.DataStructureViewList_unstructured.Where(ms => ms.Id.Equals(Model.SelectedDataStructureId)).FirstOrDefault().Title;
                            @Html.HiddenFor(m => m.SelectedDataStructureId)
                            @Html.Label(title)
                            ;
                        }
                        else
                        {

                            <select class="bx-dropdown bx-rpm-dropdown" name="SelectedDataStructureId_" id="select_structured">
                                <option value="0" title="Select a Data Structure">Select existing data structure (tabular data)</option>

                                @foreach (var item in Model.DataStructureViewList_structured)
                                {
                                    if (Model.SelectedDataStructureId == item.Id)
                                    {
                                        <option value="@item.Id" selected title="@item.Description">@item.Title</option>
                                        <script type="text/javascript">$(".datastructuresSelect").show();</script>
                                    }
                                    else
                                    {
                                        <option value="@item.Id" title="@item.Description">@item.Title</option>
                                    }


                                }
                            </select>

                        }
                        <div id="datastructuresContainer">
                            @Ajax.ActionLink("Select from table", "ShowListOfDataStructures", "CreateDataset",
                            new AjaxOptions
                            {
                                HttpMethod = "GET",
                                InsertionMode = InsertionMode.Replace,
                                UpdateTargetId = "datastructureWindowContainer"
                            },
                            new { @class = "bx-button function", @style = "float:right", title = "Select a Data Structure" })
                        </div>

                    </div>
                    <div class="datastructuresSelect_" @show_div_unstructured>
                        @if (Model.BlockDatastructureId)
                        {
                            string title = Model.DataStructureViewList_unstructured.Where(ms => ms.Id.Equals(Model.SelectedDataStructureId)).FirstOrDefault().Title;
                            @Html.HiddenFor(m => m.SelectedDataStructureId)
                            @Html.Label(title)
                            ;
                        }
                        else
                        {
                        <select class="bx-dropdown bx-rpm-dropdown" name="SelectedDataStructureId" id="select_unstructured">
                            <option value="0" title="Select a Data Structure">Select existing data structure (file)</option>

                            @foreach (var item in Model.DataStructureViewList_unstructured)
                            {
                                if (Model.SelectedDataStructureId == item.Id)
                                {
                                    <option value="@item.Id" selected title="@item.Description">@item.Title</option>
                                    <script type="text/javascript">$(".datastructuresSelect_").show();</script>
                                }
                                else
                                {
                                    <option value="@item.Id" title="@item.Description">@item.Title</option>
                                }


                            }
                        </select>
                        }

                        <div id="datastructuresContainer">
                            @Ajax.ActionLink("Select from table", "ShowListOfDataStructures", "CreateDataset",
                            new AjaxOptions
                            {
                                HttpMethod = "GET",
                                InsertionMode = InsertionMode.Replace,
                                UpdateTargetId = "datastructureWindowContainer"
                            },
                            new { @class = "bx-button function", @style = "float:right", title = "Select a Data Structure" })
                        </div>
                        <div id="datastructureWindowContainer"></div>
                    </div>
                </td>
                <td>
       
                </td>
          
            <tr>
                <td style="width: 300px;">
                    @Html.LabelFor(m => m.SelectedMetadataStructureId) <span class="bx bx-required" title="Required"></span>
                </td>
                <td style="width: 60px;">
                 @*  <div id="metadatastructuresContainer">
                        @if (Model.BlockMetadataStructureId)
                        {
                            <button class="bx-button function bx-disabled" disabled="disabled">Select</button>
                        }
                        else
                        {
                            @Ajax.ActionLink("Select", "ShowListOfMetadataStructures", "CreateDataset",
                                new AjaxOptions
                                {
                                    HttpMethod = "GET",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "metadatadatastructureWindowContainer"
                                },
                                new { @class = "bx-button function", @style = "float:right", title = "Select a Metadata Structure" })
                        }
                    </div>*@
                    <div id="metadatadatastructureWindowContainer"></div>
                </td>
                <td>
                    @if (Model.BlockMetadataStructureId)
                    {
                        string title = Model.MetadataStructureViewList.Where(ms => ms.Id.Equals(Model.SelectedMetadataStructureId)).FirstOrDefault().Title;
                        @Html.HiddenFor(m => m.SelectedMetadataStructureId)
                        @Html.Label(title)
                        
                    }
                    else
                    {

                        @(Html.Telerik().DropDownList()
                              .Name("SelectedMetadataStructureId")
                              .Placeholder("Select")
                              .HtmlAttributes(new { title = "Select a Metadata Structure", @class = "bx-dropdown" })
                              .SelectedIndex(0)
                              .BindTo(new SelectList(Model.MetadataStructureViewList, "Id", "Title", Model.SelectedMetadataStructureId))
                              .ClientEvents(e =>
                              {
                                  e.OnChange("onChangeMetadataStructure");
                              })
                        )

                    }
                </td>
                <td>
                    @Html.ValidationMessageFor(m => m.SelectedMetadataStructureId)
                </td>
            </tr>
        </table>

        <div class="bx-footer right">
            <button type="submit" value="Save" name="saveDataset" class="bx-button action" style="border:0px;">Next</button>
        </div>

    }
</div>

<script type="text/javascript">

       $("#SelectedDataStructureId").attr("disabled", true);

    $("#select_structured").on("change", function() {
            console.log(this.value);
            onChangeDataStructure(this.value);
    });

       $("#select_unstructured").on("change", function() {
            console.log(this.value);
            onChangeDataStructure(this.value);
    });


    function datasetChange(e) {

        var id;

        if ($(this).val() == "")
            id = -1;
        else
            id = $(this).val();

        //alert(id);

        $.post('@Url.Action("StoreSelectedDataset", "CreateDataset")',
            { id: id },
            function(response) {
                $("#SetupContainer").replaceWith(response);
                resetAllTelerikIconTitles();
                truncateTitle();
            })
    }

    function onChangeMetadataStructure() {
        var id;

        if ($(this).val() == "")
            id = -1;
        else
            id = $(this).val();

        $.post('@Url.Action("StoreSelectedOption", "CreateDataset")',
            { id: id, type: "ms" },
            function(response) {

            })
    }

    function onChangeDataStructure(id) {

        var id;

        if (id == "")
            id = -1;

        $.post('@Url.Action("StoreSelectedOption", "CreateDataset", new RouteValueDictionary {{"area", "DCM"}})',
            { id: id, type: "ds" },
            function(response) {

            })
    }


    $("input[Name='DataStructureOptions']").change(function () {
        var selectedRadio = $("input[name='DataStructureOptions']:checked").val();
    console.log(selectedRadio);
        if (selectedRadio == "Existing_structured") {
            $($(".datastructuresSelect")[0]).show();
        console.log(selectedRadio);
            $($(".datastructuresSelect_")[0]).hide();
            $("#SelectedDataStructureId").attr("disabled", false)

        }
        else if (selectedRadio == "Existing_unstructured") {
            $($(".datastructuresSelect_")[0]).show();
            $($(".datastructuresSelect")[0]).hide();
            $("#SelectedDataStructureId").attr("disabled", false)

        }
        else {
            $($(".datastructuresSelect")[0]).hide();
            $($(".datastructuresSelect_")[0]).hide();
            $("#SelectedDataStructureId").attr("disabled", true)

        }
    })


</script>

<style type="text/css">
    #SetupContainer .bx-dropdown {
        width: 100%;
    }
</style>