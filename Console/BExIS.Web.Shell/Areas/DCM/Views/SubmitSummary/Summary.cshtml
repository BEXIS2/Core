@model BExIS.Modules.Dcm.UI.Models.SummaryModel


<div id="Step6" class="uploadWizardStep">
    <div class="uploadWizardStep_Main">
        <div class="uploadWizardStep_Header stepper">
            <h3>@Model.StepInfo.title</h3>
        </div>

        <div class="uploadWizardStep_Description stepper">
        </div>

        <div class="uploadWizardStep_Content stepper">

            <div class="panel panel-default">

                <div class="panel-heading">File</div>
                <div class="panel-body">
                    <b>@Html.LabelFor(m => m.Filename) :</b> @Model.Filename<br />
                   <!-- <b>@Html.LabelFor(m => m.Filepath) :</b> @Model.Filepath<br />-->
                    <b>@Html.LabelFor(m => m.Extention) :</b> @Model.Extention<br />
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-heading">Dataset</div>
                <div class="panel-body">
                    <b>@Html.LabelFor(m => m.DatasetId) :</b> @Model.DatasetId <br />
                    <b>@Html.LabelFor(m => m.DatasetTitle) :</b> @Model.DatasetTitle<br />
                    <b>@Html.LabelFor(m => m.DatasetStatus) :</b> @Model.DatasetStatus
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-heading">Datastructure</div>
                <div class="panel-body">
                    <b>@Html.LabelFor(m => m.DataStructureId) :</b> @Model.DataStructureId<br />
                    <b>@Html.LabelFor(m => m.DataStructureTitle) :</b> @Model.DataStructureTitle<br />
                    <b>@Html.LabelFor(m => m.DataStructureType) :</b> @Model.DataStructureType
                </div>
            </div>

            @if (Model.DataStructureType.ToLower().Equals("structured"))
            {

                <div class="panel panel-default">

                    <div class="panel-heading">Upload</div>
                    <div class="panel-body">
                        <b>@Html.LabelFor(m => m.UploadMethod) :</b> @Model.UploadMethod<br />
                        <b>@Html.LabelFor(m => m.NumberOfRows) :</b> @Model.NumberOfRows<br />
                        <b>@Html.LabelFor(m => m.NumberOfVariables) :</b> @Model.NumberOfVariables<br />
                        <b>@Html.LabelFor(m => m.PrimaryKeys) :</b> @Model.PrimaryKeys<br />
                        <b>@Html.LabelFor(m => m.AsyncUpload) :</b> @Model.AsyncUpload
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="uploadWizardStep_Success stepper">
        <div id="progress">
            @if (Model.AsyncUpload)
            { 
                <p>@Model.AsyncUploadMessage</p>
            }

        </div>
    </div>
    <div class="uploadWizardStep_Error stepper">
        @if (Model != null)
        {
            if (Model.ErrorList != null)
            {
                if (Model.ErrorList.Count == 0)
                {


                }
                else
                { 
                   <ul>
                        @foreach (BExIS.IO.Transform.Validation.Exceptions.Error s in @Model.ErrorList)
                        { 
                            <li>@s.ToString()</li>
                        }
                   </ul>

                }
            }

        }
    </div>    
</div>


<script type="text/javascript">

    //$(document).ready(function () {


    //});

    @*function StartProgress() {

        $.post('@Url.Action("StartProgress", "SubmitSummary", new RouteValueDictionary { { "area", "DCM" } })', {}, function (taskId) {

            // Init monitors
            $("#progress").append($("<p id='" + taskId + "'/>"));
            updateMonitor(taskId, "Started");

            // Periodically update monitors
            var intervalId = setInterval(function () {
                $.post('@Url.Action("Progress", "SubmitSummary", new RouteValueDictionary { { "area", "DCM" } })', { id: taskId }, function (progress) {
                    if (progress >= 100) {
                        updateMonitor(taskId, "Completed");
                        clearInterval(intervalId);
                    } else {
                        updateMonitor(taskId, progress + "%");
                    }
                });
            }, 100);

        });
          
    };


    function updateMonitor(taskId, status) {
        $("#" + taskId).html("Task [" + taskId + "]: " + status + $.now());
    }*@
   

</script>