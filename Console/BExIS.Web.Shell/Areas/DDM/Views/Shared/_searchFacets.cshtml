@using BExIS.Utils.Models
@using Telerik.Web.Mvc.UI;
@using SearchModel = BExIS.Utils.Models.SearchModel


@model Tuple<SearchModel,IEnumerable<Facet>>
           
@{ 

    string controller = Session["Controller"].ToString();

}

<div id="searchTreeView" class="bx-trunc-parent">
@(Html.Telerik().TreeView()
       .Name("TreeView")
       .ShowCheckBox(true)
       .ExpandAll(true)

       .ClientEvents(events => events
                           .OnSelect("onSelect")
                           .OnDataBound("onDataBound")
                           .OnChecked("onChecked")
                           .OnLoad("onLoad")
                           )

                       .BindTo<Facet>(Model.Item1.SearchComponent.Facets, (item, facet) =>
                       {

                           item.Text = facet.DisplayName + " (" + facet.Count + ")";
                           item.Value = facet.Name;
                           item.Enabled = true;
                           item.Checkable = false;
                           item.Checked = false;
                           item.Expanded = true;
                           item.LinkHtmlAttributes["class"] = "searchFacet t-headeritem bx-trunc-child";
                           item.LinkHtmlAttributes["title"] = facet.Text + " (" + facet.Count + ")";

                           var l = from f in facet.Childrens
                                   orderby f.Count descending, f.Name
                                   select f;


                           foreach (Facet t in l)// @facet.Childrens)
                           {
                               t.Parent = facet;
                               bool IsSelected = Model.Item1.CriteriaComponent.ContainsFacet(t);


                               if (item.Items.Count() < 5 && t.Count > 0 || IsSelected)
                               {

                                   TreeViewItem subitem = new TreeViewItem();
                                   item.Items.Add(subitem);

                                   subitem.Text = t.Text + " (" + t.Count + ")";
                                   //subitem.Text = t.Text;

                                   //subitem.Parent = item;
                                   subitem.Value = t.Name;
                                   subitem.Enabled = true;//t.Enabled;
                                   subitem.Checked = IsSelected;
                                   subitem.Selected = IsSelected;
                                   if (IsSelected)
                                   {
                                       subitem.HtmlAttributes["class"] = "selected";
                                   }
                                   subitem.LinkHtmlAttributes["class"] = "searchFacet t-item-child bx-trunc-child";
                                   subitem.ActionName = "OnSelectTreeViewItem";
                                   subitem.ControllerName = @controller;
                                   subitem.LinkHtmlAttributes["title"] = t.Text + " (" + t.Count + ")";
                                   subitem.Action("OnSelectTreeViewItem", @controller, new RouteValueDictionary { { "area", "ddm" }, { "SelectedItem", subitem.Value }, { "Parent", item.Value } });
                               }

                           }

                           //Get Count from Facets
                           Facet tmp = Model.Item1.SearchComponent.Facets.Where(p => p.Name.Equals(facet.Name)).FirstOrDefault();
                           int count = tmp.Childrens.Where(c => c.Count > 0).Count();

                           if (item.Items.Count < count && count > 0)
                           {
                               TreeViewItem moreBt = new TreeViewItem();

                               moreBt.Text = "more";
                               moreBt.Value = "more";
                               moreBt.Enabled = true;
                               moreBt.Selected = false;
                               moreBt.Checkable = false;
                               moreBt.LinkHtmlAttributes["title"] = "more";
                               moreBt.LinkHtmlAttributes["class"] = "t-item-more bx-more bx-selection";
                               moreBt.LinkHtmlAttributes["parentDisplayName"] = facet.DisplayName;

                               if (!item.Items.Contains(moreBt))
                                   item.Items
                                       .Add(moreBt);

                           }
                       }
          ))
</div>

   @(Html.Telerik().Window()

    .Name("MoreWindow")
    .Visible(false)
    .Title("Change selection")
    .HtmlAttributes(new { @class="bx-window", @id= "MoreWindow" })
    .Width(600)
    .Modal(true)
    .Draggable(true)
    .ClientEvents(events => events
        .OnActivate("resizeOnRefresh")
        .OnClose("onClose")
    )
    .Buttons(buttons => buttons.Close())
    .Content(@<text>
       @Html.Partial("_windowCheckBoxList", new SearchModel())
    </text>
    )
)




<script type="text/javascript">

    function treeView() {
        return $('#TreeView').data('tTreeView');
    }

    function moreWindow() {
        return $('#MoreWindow').data('tWindow');
    }

    function onSelect(e) {

        //alert("test");
        // if it is a root node then a selection expand or collapse this tree element
        var selectedItem = treeView().getItemText(e.item);
        var selectedItemValue = treeView().getItemValue(e.item);
        var parent = $(e.item.parentNode).closest('.t-item').find(':input[name*="Value"]').val();
        var tmp = $(e.item).find("span")[0];
        var displayNameofParent = tmp.getAttribute("parentDisplayName");

        var detailWindow = $("#MoreWindow").data("tWindow");
        e.item.Selected = false;

        if (selectedItem == "more") {

            var detailWindow = $("#MoreWindow").data("tWindow");


            $.post('@Url.Action("ShowMoreWindow", @controller)',
                { parent: parent },
                function(response) {
                    $("#search_more").html(response);
                    $("#MoreWindow .t-window-title")[0].innerText = "Change Selection : " + displayNameofParent;
                    detailWindow.center().open();
                })

        }


        if (parent == null) {
            if (e.item.hidden) {
                treeView().collapse(e.item);

            } else {

                treeView().expand(e.item);

            }
        }
    }


    function onChecked(e) {


        var selectedItem = treeView().getItemText(e.item)
        var selectedItemValue = treeView().getItemValue(e.item)
        var parent = $(e.item.parentNode).closest('.t-item').find(':input[name*="Value"]').val();
        var parentItem = e.item;

        treeView().disable(parentItem);

        // find all checkboxes and disable it during server request
        facets_disable();

        $.post('@Url.Action("CheckedTreeViewItem", @controller, new RouteValueDictionary {{"area", "ddm"}})',
            { SelectedItem: selectedItemValue, Parent: parent },
            function(response) {
                $("#searchTreeView").html(response);
                facets_disable();

                $.post('@Url.Action("GetDataForBreadCrumbView", @controller, new RouteValueDictionary {{"area", "ddm"}})',
                    {},
                    function(response) {
                        $("#breadCrumb").replaceWith(response);
                    });

                facets_enable();
            })

        refreshGrid();
    }


    function facets_disable() {
        $("#TreeView")
            .find("input:checkbox")
            .attr("disabled", true);
    }

    function facets_enable() {
        $("#TreeView")
            .find("input:checkbox")
            .attr("disabled", false);
    }

    function onDataBound(e) {
        refreshTree()
    }

    function onLoad(e) {

        refreshTree()
    }

    function refreshTree() {
        $(".t-treeView .t-refresh").trigger('click');
    }

    function resizeOnRefresh() {
        var winContent = $('#MoreWindow .t-window-content');
        winContent.css("height", "");
    }

    function onClose() {
        $('.t-state-selected[title*="more"]').removeClass('t-state-selected');
    }

</script>
<style type="text/css">
    
     #TreeView .t-item {
         padding-right: 0;
         padding-bottom: 0;
         overflow-x: hidden;
     }

     #TreeView .t-item li:hover,
     #TreeView .t-item li.selected
     {
         background-color: #d2e8e3;
     }

     /*#TreeView .t-item-child.t-state-selected
     {
         background-color: #d2e8e3;
     }*/

    #TreeView .t-item li {
        padding-left: 5px;
        padding-right: 0;
        overflow-x: hidden;
    }

    #TreeView .t-item-child {
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: #black;

    }
    #TreeView .t-item-child:hover {
        font-weight: normal;
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: black;

    }
    #TreeView .t-item-child.t-state-selected {
        font-weight: normal;
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: black !important;
    }

    #TreeView .t-item.t-last {
        padding-bottom: 5px;
    }
</style>
         
