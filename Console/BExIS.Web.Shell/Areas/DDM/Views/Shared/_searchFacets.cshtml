@using BExIS.Utils.Models
@using Telerik.Web.Mvc.UI;
@using SearchModel = BExIS.Utils.Models.SearchModel


@model Tuple<SearchModel,IEnumerable<Facet>>

@{

    string controller = Session["Controller"].ToString();

}

<div id="searchTreeView" class="bx-trunc-parent">
    @(Html.Telerik().TreeView()
       .Name("TreeView")
       .ShowCheckBox(true)
       .ExpandAll(true)

       .ClientEvents(events => events
                           .OnSelect("onSelect")
                           .OnDataBound("onDataBound")
                           .OnChecked("onChecked")
                           .OnLoad("onLoad")
                           )

                       .BindTo<Facet>(Model.Item1.SearchComponent.Facets, (item, facet) =>
                       {

                           item.Text = facet.DisplayName + " (" + facet.Count + ")";
                           item.Value = facet.Name;
                           item.Enabled = true;
                           item.Checkable = false;
                           item.Checked = false;
                           item.Expanded = true;
                           item.LinkHtmlAttributes["class"] = "searchFacet t-headeritem bx-trunc-child";
                           item.LinkHtmlAttributes["title"] = facet.Text + " (" + facet.Count + ")";

                           var l = from f in facet.Childrens
                                   orderby f.Count descending, f.Name
                                   select f;

                           #region check the values of the facet between numerical , dates , and categorical
                           bool date_fields = false;
                           bool numeric_fields = false;

                           try
                           {
                               var xx = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Lucene.Net.Documents.DateTools.StringToDate(s.Value.Trim()));
                               date_fields = xx.Count() > 0;
                           }
                           catch (Exception ex)
                           {
                               try
                               {
                                   var xx = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Double.Parse((s.Value.Trim())));
                                   numeric_fields = xx.Count() > 0;
                               }
                               catch (Exception ex_)
                               {
                                   //throw;
                               }
                           }
                           #endregion

                           if (numeric_fields)
                           {
                               item.Expanded = true;
                               Facet xx = Model.Item2.FirstOrDefault(x => x.Name == facet.Name);

                               if (xx != null)
                               {
                                   double min = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Double.Parse(s.Value.Trim())).ToArray().Min();
                                   double max = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Double.Parse(s.Value.Trim())).ToArray().Max();
                                   double min_ = xx.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Double.Parse(s.Value.Trim())).ToArray().Min();
                                   double max_ = xx.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Double.Parse(s.Value.Trim())).ToArray().Max();
                                   var fa = Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name);
                                   if (fa.Count() > 1)
                                   {
                                       string[] last_crit = fa.Last().Values.Last().Split(new string[] { " - " }, StringSplitOptions.None);
                                       Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name).ToList().Last().Values.Clear();
                                       //Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name).ToList().Last().Values.Add(string.Join(" - ", last_crit));
                                       min = Double.Parse(last_crit[0]);
                                       max = Double.Parse(last_crit[1]);
                                   }
                                   item.Html = " <div class=\"range_container\"> " +
                                         " <div class=\"sliders_control\"> " +
                                             " <input id = \"fromSlider\" type=\"range\" value=\""+(min)+"\" min=\""+(min_ - 1)+"\" max=\""+(max_ + 1)+"\" data=\""+ facet.DisplayName + "\" /> " +
                                             " <input id = \"toSlider\" type=\"range\" value=\""+(max)+"\" min=\""+(min_ - 1)+"\" max=\""+(max_ + 1)+"\"  data=\""+ facet.DisplayName + "\" /> " +
                                         " </div> " +
                                         " <div class=\"form_control\"> " +
                                             " <div class=\"form_control_container\"> " +
                                                 " <input class=\"form_control_container__time__input\" type=\"number\" id=\"fromInput\" value=\""+(min)+"\" min=\""+(min_ - 1)+"\" max=\""+(max_ + 1)+"\"  data=\""+ facet.DisplayName + "\" /> " +
                                             " </div> " +
                                             " <div class=\"form_control_container\"> " +
                                                 " <input class=\"form_control_container__time__input\" type=\"number\" id=\"toInput\" value=\""+(max)+"\" min=\""+(min_ - 1)+"\" max=\""+(max_ + 1)+"\"  data=\""+ facet.DisplayName + "\" /> " +
                                             " </div> " +
                                         " </div> " +
                                     " </div> ";
                               }

                           }

                           if (date_fields)
                           {
                               item.Expanded = true;
                               Facet xx = Model.Item2.FirstOrDefault(x => x.Name == facet.Name);
                               if (xx != null)
                               {
                                   DateTime min = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Lucene.Net.Documents.DateTools.StringToDate(s.Value.Trim()).Date).ToArray().Min();
                                   DateTime max = facet.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Lucene.Net.Documents.DateTools.StringToDate(s.Value.Trim()).Date).ToArray().Max();
                                   DateTime min_ = xx.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Lucene.Net.Documents.DateTools.StringToDate(s.Value.Trim()).Date).ToArray().Min();
                                   DateTime max_ = xx.Childrens.ToList().Where(s => !string.IsNullOrEmpty(s.Value.Trim())).Select(s => Lucene.Net.Documents.DateTools.StringToDate(s.Value.Trim()).Date).ToArray().Max();
                                   //var fa = Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name);
                                   //if (fa.Count() > 0)
                                   //{
                                   //    string[] last_crit = fa.Last().Values.Last().Split(new string[] { " - " }, StringSplitOptions.None);
                                   //    Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name).ToList().Last().Values.Clear();
                                   //    //Model.Item1.CriteriaComponent.SearchCriteriaList.Where(sc => sc.SearchComponent.Name == facet.Name).ToList().Last().Values.Add(string.Join(" - ", last_crit));
                                   //    min = DateTime.ParseExact(last_crit[0], "yyyy/mm/dd", null);
                                   //    max = DateTime.ParseExact(last_crit[1], "yyyy/mm/dd", null);
                                   //
                                   //}
                                   item.Html = "<div class=\"range-wrap\">";
                                   //item.Html = item.Html + "<input type=\"range\" min=\"" + min_ + "\" max=\" " + max_ + "\" value=\"" + min + "\" step=\"1\" id=\"daterangeInput1\">";
                                   item.Html = item.Html + "<input type=\"date\" value=\"" + min.ToString("yyyy-MM-dd") + "\"  id=\"daterangeInput1\" min=\"" + min_.ToString("yyyy-MM-dd") + "\" max=\"" + max_.ToString("yyyy-MM-dd") + "\" onblur=\"datemyFunction(this)\">";
                                   //item.Html = item.Html + "<input type=\"range\" min=\"" + min_ + "\" max=\" " + max_ + "\" value=\"" + max + "\" step=\"1\" id=\"daterangeInput2\">";
                                   item.Html = item.Html + "<input type=\"date\"  value=\"" + max.ToString("yyyy-MM-dd") + "\" id=\"daterangeInput2\" min=\"" + min_.ToString("yyyy-MM-dd") + "\" max=\"" + max_.ToString("yyyy-MM-dd") + "\" onblur=\"datemyFunction2(this)\">";
                                   //item.Html = item.Html + "<output class=\"bubble\" id=\"datebubble\">" + min.ToShortDateString() + " - " + max.ToShortDateString() + "</output>";
                                   item.Html = item.Html + "</div>";
                               }

                           }

                           if (!numeric_fields && !date_fields)
                           {
                               foreach (Facet t in l)// @facet.Childrens)
                               {
                                   t.Parent = facet;
                                   bool IsSelected = Model.Item1.CriteriaComponent.ContainsFacet(t);


                                   if (item.Items.Count() < 5 && t.Count > 0 || IsSelected)
                                   {

                                       TreeViewItem subitem = new TreeViewItem();
                                       item.Items.Add(subitem);

                                       subitem.Text = t.Text + " (" + t.Count + ")";
                                       //subitem.Text = t.Text;

                                       //subitem.Parent = item;
                                       subitem.Value = t.Name;
                                       subitem.Enabled = true;//t.Enabled;
                                       subitem.Checked = IsSelected;
                                       subitem.Selected = IsSelected;
                                       if (IsSelected)
                                       {
                                           subitem.HtmlAttributes["class"] = "selected";
                                       }
                                       subitem.LinkHtmlAttributes["class"] = "searchFacet t-item-child bx-trunc-child";
                                       subitem.ActionName = "OnSelectTreeViewItem";
                                       subitem.ControllerName = @controller;
                                       subitem.LinkHtmlAttributes["title"] = t.Text + " (" + t.Count + ")";
                                       subitem.Action("OnSelectTreeViewItem", @controller, new RouteValueDictionary { { "area", "ddm" }, { "SelectedItem", subitem.Value }, { "Parent", item.Value } });
                                   }

                               }
                           }

                           //Get Count from Facets
                           Facet tmp = Model.Item1.SearchComponent.Facets.Where(p => p.Name.Equals(facet.Name)).FirstOrDefault();
                           int count = tmp.Childrens.Where(c => c.Count > 0).Count();

                           if (item.Items.Count < count && count > 0)
                           {
                               TreeViewItem moreBt = new TreeViewItem();

                               moreBt.Text = "more";
                               moreBt.Value = "more";
                               moreBt.Enabled = true;
                               moreBt.Selected = false;
                               moreBt.Checkable = false;
                               moreBt.LinkHtmlAttributes["title"] = "more";
                               moreBt.LinkHtmlAttributes["class"] = "t-item-more bx-more bx-selection";
                               moreBt.LinkHtmlAttributes["parentDisplayName"] = facet.DisplayName;

                               if (!item.Items.Contains(moreBt))
                                   item.Items
                                       .Add(moreBt);

                           }
                       }
          ))
</div>

@(Html.Telerik().Window()

    .Name("MoreWindow")
    .Visible(false)
    .Title("Change selection")
    .HtmlAttributes(new { @class="bx-window", @id= "MoreWindow" })
    .Width(600)
    .Modal(true)
    .Draggable(true)
    .ClientEvents(events => events
        .OnActivate("resizeOnRefresh")
        .OnClose("onClose")
    )
    .Buttons(buttons => buttons.Close())
    .Content(@<text>
       @Html.Partial("_windowCheckBoxList", new SearchModel())
    </text>
    )
)




<script type="text/javascript">

    function treeView() {
        return $('#TreeView').data('tTreeView');
    }

    function moreWindow() {
        return $('#MoreWindow').data('tWindow');
    }

    function onSelect(e) {

        //alert("test");
        // if it is a root node then a selection expand or collapse this tree element
        var selectedItem = treeView().getItemText(e.item);
        var selectedItemValue = treeView().getItemValue(e.item);
        var parent = $(e.item.parentNode).closest('.t-item').find(':input[name*="Value"]').val();
        var tmp = $(e.item).find("span")[0];
        var displayNameofParent = tmp.getAttribute("parentDisplayName");

        var detailWindow = $("#MoreWindow").data("tWindow");
        e.item.Selected = false;

        if (selectedItem == "more") {

            var detailWindow = $("#MoreWindow").data("tWindow");


            $.post('@Url.Action("ShowMoreWindow", @controller)',
                { parent: parent },
                function(response) {
                    $("#search_more").html(response);
                    $("#MoreWindow .t-window-title")[0].innerText = "Change Selection : " + displayNameofParent;
                    detailWindow.center().open();
                })

        }


        if (parent == null) {
            if (e.item.hidden) {
                treeView().collapse(e.item);

            } else {

                treeView().expand(e.item);

            }
        }
    }


    function onChecked(e) {


        var selectedItem = treeView().getItemText(e.item)
        var selectedItemValue = treeView().getItemValue(e.item)
        var parent = $(e.item.parentNode).closest('.t-item').find(':input[name*="Value"]').val();
        var parentItem = e.item;

        treeView().disable(parentItem);

        // find all checkboxes and disable it during server request
        facets_disable();

        $.post('@Url.Action("CheckedTreeViewItem", @controller, new RouteValueDictionary {{"area", "ddm"}})',
            { SelectedItem: selectedItemValue, Parent: parent },
            function(response) {
                $("#searchTreeView").html(response);
                facets_disable();

                $.post('@Url.Action("GetDataForBreadCrumbView", @controller, new RouteValueDictionary {{"area", "ddm"}})',
                    {},
                    function(response) {
                        $("#breadCrumb").replaceWith(response);
                    });

                facets_enable();
            })

        refreshGrid();
    }


    function facets_disable() {
        $("#TreeView")
            .find("input:checkbox")
            .attr("disabled", true);
    }

    function facets_enable() {
        $("#TreeView")
            .find("input:checkbox")
            .attr("disabled", false);
    }

    function onDataBound(e) {
        refreshTree()
    }

    function onLoad(e) {

        refreshTree()
    }

    function refreshTree() {
        $(".t-treeView .t-refresh").trigger('click');
    }

    function resizeOnRefresh() {
        var winContent = $('#MoreWindow .t-window-content');
        winContent.css("height", "");
    }

    function onClose() {
        $('.t-state-selected[title*="more"]').removeClass('t-state-selected');
    }

</script>
<style type="text/css">

    #TreeView .t-item {
        padding-right: 0;
        padding-bottom: 0;
        overflow-x: hidden;
    }

    #TreeView .t-item li:hover,
    #TreeView .t-item li.selected
    {
        background-color: #d2e8e3;
    }

        /*#TreeView .t-item-child.t-state-selected
     {
         background-color: #d2e8e3;
     }*/

    #TreeView .t-item li {
        padding-left: 5px;
        padding-right: 0;
        overflow-x: hidden;
    }

    #TreeView .t-item-child {
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: #black;
    
    }
    #TreeView .t-item-child:hover {
        font-weight: normal;
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: black;    

    }
    #TreeView .t-item-child.t-state-selected {
        font-weight: normal;
        width: 100% !important;
        padding-left: 0;
        padding-right: 0;
        color: black !important;
    }

    #TreeView .t-item.t-last {
        padding-bottom: 5px;
    }
</style>

<script type="text/javascript">


    function refresh_sliders(element,from, to) {
        var parent = element.getAttribute('data');
        $.post('@Url.Action("CheckedTreeViewItem", @controller, new RouteValueDictionary {{"area", "ddm"}})',
            { SelectedItem: from +" - "+ to , Parent: parent },
            function(response) {
                $("#searchTreeView").html(response);
                facets_disable();

                $.post('@Url.Action("GetDataForBreadCrumbView", @controller, new RouteValueDictionary {{"area", "ddm"}})',
                    {},
                    function(response) {
                        $("#breadCrumb").replaceWith(response);
                        refreshGrid();
                    });

                facets_enable();
            })

        refreshGrid();
    }

    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
            refresh_sliders(fromSlider,from,to)
        } else {
            fromSlider.value = from;
        }
    }

    function controlToInput(toSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        setToggleAccessible(toInput);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
            refresh_sliders(toSlider,from, to)
        } else {
            toInput.value = from;
        }
    }

    function controlFromSlider(fromSlider, toSlider, fromInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
            refresh_sliders(fromSlider,from, to)
        } else {
            fromInput.value = from;
        }
    }

    function controlToSlider(fromSlider, toSlider, toInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        setToggleAccessible(toSlider);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
            refresh_sliders(toSlider,from, to)
        } else {
            toInput.value = from;
            toSlider.value = from;
        }
    }

    function getParsed(currentFrom, currentTo) {
        const from = parseInt(currentFrom.value, 10);
        const to = parseInt(currentTo.value, 10);
        return [from, to];
    }

    function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
        const rangeDistance = to.max - to.min;
        const fromPosition = from.value - to.min;
        const toPosition = to.value - to.min;
        controlSlider.style.background = `linear-gradient(
      to right,
      ${sliderColor} 0%,
      ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
      ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
      ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
      ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
      ${sliderColor} 100%)`;
    }

    function setToggleAccessible(currentTarget) {
        const toSlider = document.querySelector('#toSlider');
        if (Number(currentTarget.value) <= 0) {
            toSlider.style.zIndex = 2;
        } else {
            toSlider.style.zIndex = 0;
        }
    }

    const fromSlider = document.querySelector('#fromSlider');
    const toSlider = document.querySelector('#toSlider');
    const fromInput = document.querySelector('#fromInput');
    const toInput = document.querySelector('#toInput');
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
    setToggleAccessible(toSlider);

    fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
    toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
    fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
    toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);

</script>
<style type="text/css">
    .range_container {
        display: flex;
        flex-direction: column;
        width: 80%;
        margin: auto;
    }

    .sliders_control {
        position: relative;
        min-height: 10px;
    }

    .form_control {
        position: relative;
        display: flex;
        justify-content: space-between;
        color: #635a5a;
    }

    input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        width: 12px;
        height: 12px;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-moz-range-thumb {
        -webkit-appearance: none;
        pointer-events: all;
        background-color: #fff;
        border-radius: 50%;
        box-shadow: 0 0 0 1px #C6C6C6;
        cursor: pointer;
    }

    input[type=range]::-webkit-slider-thumb:hover {
        background: #f7f7f7;
    }

    input[type=range]::-webkit-slider-thumb:active {
        box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
        -webkit-box-shadow: inset 0 0 3px #387bbe, 0 0 9px #387bbe;
    }

    input[type="number"] {
        color: #8a8383;
        width: 50px;
        border: none;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        opacity: 1;
        -webkit-appearance: none;
    }

    input[type="range"] {
        -webkit-appearance: none;
        appearance: none;
        height: 2px;
        width: 100%;
        position: absolute;
        background-color: #C6C6C6;
        pointer-events: none;
    }

    #fromSlider {
        height: 0;
        z-index: 1;
    }
</style>