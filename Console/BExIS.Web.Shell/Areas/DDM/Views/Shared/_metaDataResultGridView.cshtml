@model System.Data.DataTable
@using BExIS.Utils.Models;
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;
@using Telerik.Web.Mvc.UI;


@{

    int PageSize = Convert.ToInt16(ViewData["PageSize"]);
    int CurrentPage =  Convert.ToInt16(ViewData["CurrentPage"]);
    List<HeaderItem> DefaultHeaderList = (List<HeaderItem>)ViewData["DefaultHeaderList"];
    HeaderItem Id = (HeaderItem)ViewData["Id"];


    StructuredDataStructure sds = new StructuredDataStructure();
    Tuple<StructuredDataStructure, long> defaultModel = new Tuple<StructuredDataStructure, long>(sds, 0);


    GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
    pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
    pagerStyles |= GridPagerStyles.Numeric;

    string controller = Session["Controller"].ToString();


}


@(Html.Telerik().Grid<System.Data.DataRow>()
        .Name("resultGrid")

            .DataBinding(dataBinding => dataBinding
                .Ajax()
                .Select("_CustomBinding", @controller, new { area = "ddm" })
            )

            .EnableCustomBinding(true)
            .HtmlAttributes(new { @class = "result-grid" })
            .Columns(columns =>
            {
                for (int i = 0; i < Model.Columns.Count; i++)
                {
                    DataColumn column = Model.Columns[i];
                    if (DefaultHeaderList.Any(p => p.Name.Equals(column.ColumnName)))
                    {

                        string title;

                        if (column.Caption == "")
                        {
                            title = column.ColumnName;
                        }
                        else
                        {
                            title = column.Caption;
                        }

                        //set fix with, when column is id
                        if (column.ColumnName.ToLower().Equals("id"))
                        {
                            columns.Bound(column.DataType, column.ColumnName)
                                .Title(title).Width(80);
                        }
                        else
                        {
                            columns.Bound(column.DataType, column.ColumnName)
                               .Title(title);
                        }
                    }
                    else
                    {
                        //set fix with, when column is id
                        if (column.ColumnName.ToLower().Equals("id"))
                        {
                            columns.Bound(column.DataType, column.ColumnName).Hidden()
                                .Title(column.Caption).Width(80);
                        }
                        else
                        {
                            columns.Bound(column.DataType, column.ColumnName).Hidden()
                                .Title(column.Caption);
                        }
                    }

                }

                if (@Model.Columns.Count > 0)
                {
                    columns.Bound("").Width(40).ClientTemplate(
                    "<div class='searchResultFunctionDiv'>" +
                        "<a  id='<#= " + @Model.Columns[Id.Name].ColumnName +"#>' class = 'bx bx-grid-function bx-show' title = 'View details' onclick='onclickDataset(this)'></a>"+
                     "</div>"
                    )
                    .Groupable(false)
                    .Sortable(false)
                    .Filterable(false);
                }

            })

            .ClientEvents(events => events
                        .OnComplete("onComplete")
                        .OnLoad("refreshGrid")
                        .OnSubmitChanges("refreshGrid")
                        .OnRowDataBound("resultGrid_OnRowDataBound")
                        .OnDataBound("onDataBound")
                        .OnColumnShow("resultGrid_OnColumnChanged")
                        .OnColumnHide("resultGrid_OnColumnChanged")

                        )
            .Pageable(paging =>
                paging
                        .Style(pagerStyles)
                        .PageSize(PageSize)
                    .Position(GridPagerPosition.Both)
                        .PageTo(CurrentPage)
                    )

            .Sortable()
            .Filterable()
            .ColumnContextMenu()

)


<script type="text/javascript">

	$('document')
		.ready(function() {

			$('.t-filter').attr("title", "Filter");

		});

	function resultGrid_OnColumnChanged(e)
	{
		//alert("changed");
	
	}


	function resultGrid_OnRowDataBound(e) {

		//alert("changed");
		//truncateTitle();

		////alert(e.item);
		//var obj = e.row.childNodes;

		//$.each(obj, function (i) {

		//	obj[i].title = obj[i].textContent;
		//	if (obj[i].textContent.length > 35) {
		//		obj[i].textContent = jQuery.trim(obj[i].textContent).substring(0, 35).trim(this) + "...";
		//	}
		//});

	}

	function onclickDataset(e) {

		// checked
		var id = e.getAttribute("id");


		var data = {
			id: id
		}

		$.ajax({
			url: '/ddm/Data/IsDatasetCheckedIn',
			type: 'POST',
			data: JSON.stringify(data),
			dataType: 'json',
			contentType: 'application/json; charset=utf-8',
			error: function (xhr) {
				alert('Error: ' + xhr.statusText);

			},
			success: function (result) {
				if (result) {
					window.open("/ddm/Data/Show/" + id, "_blank");
				} else {
					
					alert("Dataset is locked. Please try again later.");
				}
			}
		});
	}


	function onDataBound()
	{
		resetAllTelerikIconTitles();
		addTooltips();
	}


</script>

<style type="text/css">

	#resultGrid .t-grid-content
	{
		position:relative;
		height : auto !important;
		max-height:450px;
		/*overflow:auto;*/
	}

	
	#resultGrid .searchResultFunctionDiv
	{

		text-align:right;
	}

</style>
