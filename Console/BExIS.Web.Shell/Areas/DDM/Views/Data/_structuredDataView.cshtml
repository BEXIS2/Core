@model ShowPrimaryDataModel
@using System.Data;
@using BExIS.Dlm.Entities.DataStructure;
@using BExIS.Modules.Ddm.UI.Models
@using Telerik.Web.Mvc.UI;
@using System.Linq;


@{
	ViewBag.Title = "Primary Data";

	bool fullDataset = false;

	long id = Model.DatasetId;
	StructuredDataStructure dataStructure = (StructuredDataStructure)Model.DataStructure;

	GridPagerStyles pagerStyles = GridPagerStyles.PageSizeDropDown;
	pagerStyles |= GridPagerStyles.NextPreviousAndNumeric;
	pagerStyles |= GridPagerStyles.Numeric;


	int total = 0;
	if (Session["gridTotal"] != null)
	{
		total = Convert.ToInt32(Session["gridTotal"]); //  (int)Session["gridTotal"];
	}

	string compareValues = String.Join(",", Model.CompareValuesOfDataTypes.ToArray());


}


@section Scripts{
	<link href="@Url.Content(Themes.GetResourcePath("Styles", "images.css"))" rel="stylesheet" type="text/css" />
	<script type="text/javascript" src="/Areas/ddm/Scripts/ddm.js"></script>
	@*<script type="text/javascript" src="/Areas/ddm/Views/Shared/ddm.js"></script>*@
}

@section information
{
	<p>To download the entire dataset choose one of the following formats.</p>

	<p>Note: If you are the first one to download this dataset it may take a
		little longer, because the file has to be created.</p>
<p>
	<a href="/DCM/Help/Index/#_Toc451435014" class="bx-informationLink" title="go to help" target="_blank">More</a>
</p>
}
<div id="downloadOptions" style="text-align:left;">

	@if (Model.DownloadAccess && Model.Data != null && Model.Data.Rows.Count > 0)
	{
		<button id="downloadExcelTemplateButton" class="bx-button function" title="Xlsx download" onclick="downloadExcelTemplate(@Model.DatasetId)">Download Template</button>

		<button id="downloadExcelButton" class="bx-button function" title="Xlsx download" onclick="downloadExcel(@Model.DatasetId)">Download Excel</button>

		<span class="dropdown">
			<button class="bx-button function" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
				Download Text
				<span class="caret"></span>
			</button>
			<ul class="dropdown-menu" aria-labelledby="dropdownMenu1">

				@foreach (KeyValuePair<string, string> fileType in Model.AsciiFileDownloadSupport)
				{
					<li><a class="file-type-download-entry" ext="@fileType.Value"> @fileType.Key</a></li>
				}

			</ul>
		</span>

		@Html.CheckBox("DownLoadFullDataset", new { text = "Download full dataset", @id = "fullDatasetDownload" }) @Html.Label("Download full dataset")

	}
	else
	{

		<button title="Download Excel"
				name="Download Excel"
				class="t-button t-state-disabled margin"
				disabled="disabled">
			Download Excel
		</button>
		<button title="Download Comma Separated"
				name="Download Comma Separated"
				class="t-button t-state-disabled margin"
				disabled="disabled">
			Download Text
		</button>
		@*<input type="checkbox"  disabled="disabled" >Download full dataset</input>*@
	}

	<span id="preloaderContainer" style="float: right"></span>
</div>
<br />
@(Html.Telerik().Grid(Model.Data)
		.Name("PrimaryDataResultGrid")
			.DataBinding(dataBinding => dataBinding
					.Ajax()
					.Select("_CustomPrimaryDataBinding", "Data", new RouteValueDictionary { { "area", "ddm" }, { "datasetID", id } })
					.OperationMode(GridOperationMode.Server)
				 )

				.EnableCustomBinding(true)
				.HtmlAttributes(new { @class = "primaryDataResultGrid" })
				.ClientEvents(events => events
						 .OnLoad("PrimaryDataResultGrid_OnLoad")
						 .OnDataBound("PrimaryData_OnCommand")
						 .OnColumnHide("PrimaryData_OnCommand")
						 .OnColumnShow("PrimaryData_OnCommand")
					)
			.Columns(columns =>
			{
				for (int i = 0; i < Model.Data.Columns.Count; i++)
				{

					DataColumn column = Model.Data.Columns[i];

					string title;
					bool visible = false;



					if (column.Caption == "")
					{
						title = column.ColumnName;
					}
					else
					{
						title = column.Caption;
					}

					if (column.ColumnName.ToLower().StartsWith("var"))
					{
						visible = true;

						DisplayFormatObject dfo = Model.DisplayFormats.FirstOrDefault(a => a.Column.Equals(title));

						string format = "";

						if (dfo != null && !string.IsNullOrEmpty(dfo.Format))
						{
							//string unit = "";
							//if (dfo.Unit != "None") unit = dfo.Unit;

							format = "{0:" + dfo.Format + "}";

							columns.Bound(column.DataType, column.ColumnName)
							   .Title(title).Format(format).Hidden(!visible);
						}
						else
						{
							columns.Bound(column.DataType, column.ColumnName)
							   .Title(title).Hidden(!visible);
						}
					}
				}
			})


			.Pageable(paging =>
				paging.PageSize(100,new int[]{10,20,50,100,500})
					.Style(pagerStyles)
					.Position(GridPagerPosition.Both)
					.Total(total)
					)
			.Sortable()
			.Filterable()
			.ColumnContextMenu()
//.Groupable()

)

<br />


<script type="text/javascript">


	$(document).ready(function(){

		OnDataBound();
	})

	$("#fullDatasetDownload").change(function () {
		var subset = $('#fullDatasetDownload').is(":checked");

		$.post('@Url.Action("SetFullDatasetDownload", "Data", new RouteValueDictionary { { "area", "ddm" } })', { subset: subset }, function (response) {

		})
	});

	function PrimaryDataResultGrid_OnLoad(e) {
		$('.t-grid .t-status').hide();
	}

	function PrimaryData_OnCommand(e) {

		var grid = $("#PrimaryDataResultGrid").data("tGrid");

		var columns = grid.columns;

		var currentFilter = grid.filterBy;
		var currentOrder = grid.orderBy;

		var visibleColumns ="";
		jQuery.each(columns, function (index) {
			if (!this.hidden) {
				if (visibleColumns != "")

					visibleColumns += "," + this.member;
				else
					visibleColumns = this.member;
			}
		});

		$.post('@Url.Action("SetGridCommand", "Data", new RouteValueDictionary { { "area", "ddm" } })', { filters: currentFilter, orders: currentOrder, columns: visibleColumns }, function (response) {
		//alert("set grid");
		OnDataBound();
		})

		resetAllTelerikIconTitles();
		addTooltips();

	}

	function OnDataBound() {
		addTooltips();
		resetAllTelerikIconTitles();

		var compareValuesString = '@compareValues'
		var compareValuesArray = compareValuesString.split(",")

		$("#PrimaryDataResultGrid td")
			.each(function() {

				for (var i = 0; i < compareValuesArray.length; i = i + 1) {

					if (this.innerHTML == compareValuesArray[i]) {
						this.innerHTML = " ";
					}
				}
			})

		$("#PrimaryDataResultGrid .t-grouping-row .t-reset")
			.each(function() {

				var valueArray = this.innerHTML.split(": ");
				//alert(valueArray);
				var value = valueArray[valueArray.length - 1];

				//alert(value);
				for (var i = 0; i < compareValuesArray.length; i = i + 1) {

					if (value == compareValuesArray[i]) {

						var newValue = valueArray[0] + ": ";
						this.innerHTML = newValue;
					}
				}

			})

	}

	$(".file-type-download-entry").click(function (id) {

		var ext = $(this).attr("ext");

		$("#preloaderContainer").preloader(20, "Preparing excel file...");

		window.location = '@Url.Action("DownloadAscii", "Data", new { id = @Model.DatasetId})'+"?ext="+ext;

		$.ajax({
			url: '@Url.Action("DownloadAscii", "Data", new { id = @Model.DatasetId })'+"?ext=" + ext,
			contentType: 'application/json; charset=utf-8',
			datatype: 'json',
			type: "GET",
			success: function(e) {

				if (e) {
					window.location = '@Url.Action("DownloadAscii", "Data", new { id = @Model.DatasetId})'+"?ext="+ext;
				}
				else {
					alert(e);
				}

				$("#preloaderContainer").removePreloader();
			}
		})
	})


	function downloadExcelTemplate(id) {

		$("#preloaderContainer").preloader(20, "Preparing excel file...");
		//"DownloadAsExcelData", "Data", new { id = @Model.DatasetId }
		$.ajax({
			url: '@Url.Action("PrepareExcelTemplateData", "Data", new { id = @Model.DatasetId })',
			contentType: 'application/json; charset=utf-8',
			datatype: 'json',
			type: "GET",
			success: function(e) {

				if (e) {
					window.location = '@Url.Action("DownloadAsExcelTemplateData", "Data", new { id = @Model.DatasetId })';
				}
				else {
					alert(e);
				}

				$("#preloaderContainer").removePreloader();
			}
		})}

	function downloadExcel(id) {

		$("#preloaderContainer").preloader(20, "Preparing excel file...");
		//"DownloadAsExcelData", "Data", new { id = @Model.DatasetId }
		$.ajax({
			url: '@Url.Action("PrepareExcelData", "Data", new { id = @Model.DatasetId })',
			contentType: 'application/json; charset=utf-8',
			datatype: 'json',
			type: "GET",
			success: function(e) {

				if (e) {
					window.location = '@Url.Action("DownloadAsExcelData", "Data", new { id = @Model.DatasetId })';
				}
				else {
					alert(e);
				}

				$("#preloaderContainer").removePreloader();
			}
		})}

	function downloadCsv(id) {

		$("#preloaderContainer").preloader(20, "Preparing csv file...");
		//"DownloadAsExcelData", "Data", new { id = @Model.DatasetId }
		$.ajax({
			url: '@Url.Action("PrepareCsvData", "Data", new { id = @Model.DatasetId })',
			contentType: 'application/json; charset=utf-8',
			datatype: 'json',
			type: "GET",
			success: function (e) {

				if (e) {
					window.location = '@Url.Action("DownloadAsCsvData", "Data", new { id = @Model.DatasetId })';
				}
				else {
					alert(e);
				}


				$("#preloaderContainer").removePreloader();
			}
		})
	}

	function downloadText(id) {

		$("#preloaderContainer").preloader(20, "Preparing txt file...");
		//"DownloadAsExcelData", "Data", new { id = @Model.DatasetId }
		$.ajax({
			url: '@Url.Action("PrepareTxtData", "Data", new { id = @Model.DatasetId })',
			contentType: 'application/json; charset=utf-8',
			datatype: 'json',
			type: "GET",
			success: function (e) {

				if (e) {
					window.location = '@Url.Action("DownloadAsTxtData", "Data", new { id = @Model.DatasetId })';
				}
				else {
					alert(e);
				}

				$("#preloaderContainer").removePreloader();
			}
		})
	}

	//function onDownloadEnd(e) {
	//    console.log(e);
	//    $("#preloaderContainer").removePreloader();
	//}

</script>

<style type="text/css">

	.primaryDataResultGrid .t-grid-content
	{
		height : auto !important;
	   
	}

	.primaryDataResultGrid .t-grid-content td
	{
		padding-left:0;
		text-align:left;
	}

	.margin
	{
		margin-left:2px;
	}

</style>    




