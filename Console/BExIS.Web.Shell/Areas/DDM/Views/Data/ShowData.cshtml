@model BExIS.Modules.Ddm.UI.Models.ShowDataModel

@{
    int tabIndex = 0;

    if (ViewData["TabIndex"] != null)
    {
        tabIndex = Convert.ToInt32(ViewData["TabIndex"].ToString());
    }

    var show_tabs = new Dictionary<string, string>();

    if (ViewData["show_tabs"] != null)
    {
        show_tabs = (Dictionary<string, string>)ViewData["show_tabs"];
    }
    else
    {
        show_tabs.Add("show_primary_data_tab", "true");
        show_tabs.Add("show_data_structure_tab", "true");
        show_tabs.Add("show_link_tab", "true");
        show_tabs.Add("show_permission_tab", "true");
        show_tabs.Add("show_publish_tab", "true");
        show_tabs.Add("show_attachments_tab", "true");

        show_tabs.Add("show_tabs_deactivated", "true"); // "false" = also hide request button, if not available in addition to deactivated tabs
    }

}

@section Information
{
    This is a detailed view on all parts of a dataset. Depending on your
    permissions your are able to view, edit, or download either the
    metadata, the primary data or the data structure.<br />
    You may also set permissions for this particular dataset
    <p>
        <a href="~/ddm/Help/Index/#_overview" class="bx-informationLink" title="go to help" target="_blank">More</a>
    </p>

}

@*load sctipts from dcm for the metadata. *@
@section scripts
{
    <script src="@Url.Content("~/Areas/Dcm/Scripts/Form.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Areas/Dcm/Scripts/minimap/minimap.js")" type="text/javascript"></script>
}
<link href="@Url.Content("~/Areas/Dcm/Content/bexis-metadata.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Areas/DDM/Content/ddm.css")" rel="stylesheet" type="text/css" />

<div id="showData">
    <div id="showData">
        <h1>@Model.Title</h1>

        @if (!Model.LatestVersion)
        {
            <div id="view-warning-container">

                <div id="view-warning" class="alert alert-info" role="alert" style="width: 100%;">
                    <span id="view-warning-icon" class=" fa fa-exclamation-triangle"></span>
                    Attention, this is not the latest version. Click <span class="btn-link" style="cursor: pointer;" onclick="selectVersion(@Model.Id, @Model.LatestVersion)"><b>here</b></span> to change to the latest version.
                </div>
            </div>
        }

        <div id="view-header" class="row">
            <div id="view-header-dataset-details" class="col-xs-6 col-md-6 col-lg-6 ">
                <div class="row">
                    <div class="col-md-6" style="white-space: nowrap;display: flex;">
                        <div>
                            <b>Dataset id:</b> @Model.Id
                            <b style="padding-left: 5px;">Version:</b>
                            @Html.DropDownListFor(m => m.VersionSelect, null, new { @class = "bx-dropdown", @style = "border:none;" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-2 col-md-2 col-lg-2">
                <div id="preloaderContainer"></div>
            </div>

            <div id="view-header-dataset-options" class="col-xs-4 col-md-4 col-lg-4 pull-right text-right">

                @if (Model.DownloadAccess)
                {

                    if (Model.DataStructureType.ToLower().Equals("structured"))
                    {
                        <span class="dropdown">
                            <button class="bx-button function" type="button" id="dropdownMenu1" data-toggle="dropdown" title="Download dataset with a selected dataformat for the primary data" aria-haspopup="true" aria-expanded="true">
                                Download Dataset
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1" style="z-index:100000; margin-top:10px;">
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsm", version = Model.VersionId  })">... with Template</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsx", version = Model.VersionId })">... with Excel</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/csv", version = Model.VersionId })">... with CSV</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/tsv", version = Model.VersionId })">... with TSV</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/plain", version = Model.VersionId })">... with TXT</a></li>
                            </ul>
                        </span>
                    }
                    else
                    {
                        <a class="bx-button function" href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id,version = Model.VersionId, format = "" })">Download</a>
                    }
                }
                else
                {
                    if (Model.RequestAble)
                    {

                        if (Model.RequestExist)
                        {
                            <button id="sendRequestBt" class="bx-button function bx-disabled" title="Send request to the owner of the dataset for the rights to see and download the primary data." disabled="disabled">Request Pending</button>
                        }
                        else
                        {
                            @Html.TextArea("intention", new { @class = "bx-input", placeholder = "describe your intention " });
                            <button id="sendRequestBt" datasetId="@Model.Id" class="bx-button function" title="Send request to the owner of the dataset for the rights to see and download the primary data.">Request Access</button>
                        }
                    }
                    else
                    {
                        if (show_tabs["show_tabs_deactivated"] == "true")
                        {
                            <button id="sendRequestBt" class="bx-button function bx-disabled" title="Send request to the owner of the dataset for the rights to see and download the primary data. If the function is not available, please contact the administrator." disabled="disabled">Currently not available</button>
                        }
                    }
                }
            </div>
        </div>
        @if (@Model != null)
        {
            if (ViewData.ModelState.IsValid)
            {

                @(Html.Telerik().TabStrip()
                                      .Name("ShowDataTabStrip")
                                      .SelectedIndex(tabIndex)
                                      .Items(tabs =>
                                      {

                                          //ToDo Recator Modularity -> load metadata from from dcm

                                          // Allways show Metadata and data structure tab

                                          tabs.Add()
                                             .Text("Metadata")
                                             .LoadContentFrom("ShowMetadata", "Data", new { area = "ddm", entityId = @Model.Id, title = @Model.Title, metadatastructureId = @Model.MetadataStructureId, datastructureId = @Model.DataStructureId, researchplanId = @Model.ResearchPlanId, sessionKeyForMetadata = "ShowDataMetadata", latest = Model.LatestVersion, isValid = ViewBag.isValid })
                                             .HtmlAttributes(new { id = "metadata" });

                                          if (show_tabs["show_primary_data_tab"] == "true" && !(show_tabs["show_tabs_deactivated"] == "false" && @Model.ViewAccess == false))
                                          {
                                              tabs.Add()
                                                  .Text("Primary Data")
                                                  .LoadContentFrom("ShowPrimaryData", "Data", new { area = "ddm", datasetID = @Model.Id, versionId = Model.VersionId })
                                                  .HtmlAttributes(new { id = "primarydata" })
                                                  //.Enabled(@Model.ViewAccess);
                                                  .Enabled(false);

                                          }
                                          if (show_tabs["show_data_structure_tab"] == "true")
                                          {
                                              tabs.Add()
                                                  .Text("Data Structure")
                                                  .LoadContentFrom("ShowPreviewDataStructure", "Data", new { area = "ddm", datasetID = @Model.Id })
                                                  .HtmlAttributes(new { id = "datastructure" })
                                                  .Enabled(false);


                                          }
                                          if (show_tabs["show_link_tab"] == "true")
                                          {
                                              tabs.Add()
                                                .Text("Links")
                                                .LoadContentFrom("ShowReferences", "Data", new { area = "ddm", id = @Model.Id, version = Model.Version })
                                                .HtmlAttributes(new { id = "showreferences" })
                                                .Enabled(false);
                                                
                                          }

                                          if (show_tabs["show_permission_tab"] == "true" && !(show_tabs["show_tabs_deactivated"] == "false" && @Model.GrantAccess == false))
                                          {
                                              tabs.Add()
                                                  .Text("Dataset Permissions")
                                                  .LoadContentFrom("DatasetPermissions", "Data", new { area = "ddm", datasetId = @Model.Id })
                                                  .HtmlAttributes(new { id = "datapermissions" })
                                                  //.Enabled(@Model.GrantAccess);
                                                  .Enabled(false);

                                          }
                                          if (show_tabs["show_publish_tab"] == "true" && !(show_tabs["show_tabs_deactivated"] == "false" && @Model.ViewAccess == false))
                                          {
                                              tabs.Add()
                                                    .Text("Publish")
                                                    //.Content(@Html.Render("dim", "Submission", "getPublishDataPartialView", new RouteValueDictionary { { "datasetid", @Model.Id } }).ToHtmlString())
                                                    .LoadContentFrom("getPublishDataPartialView", "Submission", new { area = "dim", datasetId = @Model.Id })
                                                    //.Enabled(@Model.ViewAccess)
                                                    .Enabled(false)
                                                    .HtmlAttributes(new { id = "prepare" });
                                          }
                                          if (show_tabs["show_attachments_tab"] == "true" && !(show_tabs["show_tabs_deactivated"] == "false" && @Model.ViewAccess == false))
                                          {
                                              tabs.Add()
                                              .Text("Attachments")
                                              .LoadContentFrom("DatasetAttachements", "Attachments", new { area = "dcm", datasetId = @Model.Id, versionId = Model.VersionId })
                                              .HtmlAttributes(new { id = "attachements" })
                                              //.Enabled(@Model.ViewAccess);
                                              .Enabled(false);


                                          }
                                      })
                                      .ClientEvents(e => e.OnSelect("OnSelectShowDataTabStrip")))
            }
            else
            {
                @Html.ValidationSummary(true);
            }
        }
        <script type="text/javascript">

	function grid_subjects_onDataBound() {
		addTooltips();
		resetAllTelerikIconTitles();

		$("#grid_subjects tbody input:checkbox").click(function () {
			if ($(this).is(':checked')) {
				$.post('@Url.Action("AddRightToEntityPermission", "UserPermissions", new { area = "sam"})',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			} else {
				$.post('@Url.Action("RemoveRightFromEntityPermission", "UserPermissions", new { area = "sam" })',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			}
		});
	}

	$("#MetadataEditor").ready(function() {

	});

	$(document).ready(function () {

        console.log("ready");

		$("#preloaderContainer").preloader(20, "Loading...");
		resetAllTelerikIconTitles();

        // set event if the metadata was edit an save, page need a reload
        $(document).on("save", function () {

            $('#showData').empty();

            //$("#preloaderContainer").preloader(20, "Reloading...");
            $.get('@Url.Action("Reload","Data", new { id= @Model.Id})', function (data) {

                $('#showData').replaceWith(data);
            })
        })

        $(document).bind("MetadataFormIsReady", function () {

            console.log("metadata ready");
			//alert("m is ready");
			var viewAccess = '@Model.ViewAccess';
			var grantAccess = '@Model.GrantAccess';

			var tabStrip = $(".t-tabstrip");
			//console.log(tabStrip);
			//console.log(viewAccess);
			//console.log(grantAccess);

            $("li#datastructure").removeClass("t-state-disabled");
            $("li#showreferences").removeClass("t-state-disabled");
			//console.log($(tabStrip).find("li #datastructure"));

			if (viewAccess === "True") {
				$("li#primarydata").removeClass("t-state-disabled");
				$("li#prepare").removeClass("t-state-disabled");
				$("li#attachements").removeClass("t-state-disabled");
				$("li#attachements").removeClass("t-state-disabled");

			}

			if (grantAccess === "True") {
				$(tabStrip).find("li#datapermissions").removeClass("t-state-disabled");
			}

			//console.log($("li", tabStrip.element));
			var items = $("li", tabStrip.element);
			//console.log(items);
			//tabStrip.enable(items);

			$("#preloaderContainer").removePreloader();
		});

	});

	function existsRightType(rights, rightType) {
		if (jQuery.inArray(rightType, rights) != -1) {
			return true;
		}
		else {
			return false;
		}
	}

    function OnSelectShowDataTabStrip(e) {

		if (e.item.id == "metadata") {

            $("#MetadataEditor").show();

			setTimeout(function () {
				bindMinimap(true);

				$(window).resize(function () {

						setTimeout(function () {
							//alert("r");
							bindMinimap();
						}, 120);
					});

			}, 120);

		}
        else {

            $("#MetadataEditor").hide();

			$(".miniregion").remove();
			$(".minimap").remove();

			$(window).off('resize');
		}

		if (e.item.id == "prepare") {

			var tabStrip = $("#ShowDataTabStrip").data("tTabStrip");
			tabStrip.reload($("#" + e.item.id));
		}
	}

	function download(id, format) {

		$("#preloaderContainer").preloader(20, "Preparing zip file...");

		window.location = '@Url.Action("DownloadZip", "Data", new { id = @Model.Id})';

		$("#preloaderContainer").removePreloader();

	}

	$("#sendRequestBt").click(function() {

        var id = $(this).attr("datasetId");

        var intention = $("#intention").val();

	    $.post("/DDM/Data/SendRequest", { id, intention }, function(data) {
	        if (data === true) {
	            $("#sendRequestBt").prop("disabled", "disabled");
	            $("#sendRequestBt").addClass("bx-disabled", "bx-disabled");
                $("#sendRequestBt").text("Request has been made.");

                $("#intention").remove();
	        }
	    });

    });

    $("#VersionSelect").on('change', function () {
        console.log("change url");
        var versionNumber = $("#VersionSelect").val();
        selectVersion(@Model.Id, versionNumber);
    });

   function selectVersion(datasetId, versionNumber) {
        var redirectURL = '@Url.Action("Show","Data")';
        window.location.href = redirectURL + "/" + datasetId + "?version=" + versionNumber;
   }
        </script>
    </div>