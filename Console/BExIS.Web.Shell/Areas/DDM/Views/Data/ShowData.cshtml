@model BExIS.Modules.Ddm.UI.Models.ShowDataModel
@using BExIS.UI.Hooks;
@*@using BExIS.Modules.Ddm.UI.Helpers;*@
@using BExIS.Utils.Extensions

@{
    int tabIndex = 0;

    if (ViewData["TabIndex"] != null)
    {
        tabIndex = Convert.ToInt32(ViewData["TabIndex"].ToString());
    }

    var show_tabs = new Dictionary<string, string>();
    string check_public_metadata = "false";

    if (ViewData["datasetSettings"] != null)
    {
        show_tabs = (Dictionary<string, string>)ViewData["datasetSettings"];
        check_public_metadata = show_tabs["check_public_metadata"];
    }
    else
    {
        show_tabs.Add("show_data_tab", "true");
        show_tabs.Add("show_datadescription_tab", "true");
        show_tabs.Add("show_link_tab", "true");
        show_tabs.Add("show_permission_tab", "true");
        show_tabs.Add("show_publish_tab", "true");
        show_tabs.Add("show_attachments_tab", "true");

        show_tabs.Add("show_tabs_deactivated", "true"); // "false" = also hide request button, if not available in addition to deactivated tabs
    }

    int total = 0;
    if (ViewData["gridTotal"] != null)
    {
        total = Convert.ToInt32(ViewData["gridTotal"]); //  (int)Session["gridTotal"];
    }

    Hook metadataHook = null;
    Hook dataHook = null;
    Hook dataDescriptionHook = null;

    // set active Hook
    Hook activeHook = null;
    // if
    string activeHookName = "metadata";

    // set order of the tabs
    var datasetHooks = new List<Hook>();
    var additionalHooks = new List<Hook>();

    // separate dataset hooks and additional hooks
    foreach (var hook in Model.Hooks)
    {
        // check if the hook is blocked by settings
        string key = "show_" + hook.Name.ToLower() + "_tab";
        bool isNotBlocked = true;

        if (show_tabs.ContainsKey(key))
        {
            bool.TryParse(show_tabs[key], out isNotBlocked);
        }

        if (hook != null && isNotBlocked)
        {
            //set active hook based one nam in session
            if (hook.Name.Equals(activeHookName))
            {
                activeHook = hook;
            }

            if (hook.Name == "metadata")
            {
                metadataHook = hook;
            }
            else if (hook.Name == "data")
            {
                dataHook = hook;
            }
            else if (hook.Name == "datadescription")
            {
                dataDescriptionHook = hook;
            }
            else
            {
                additionalHooks.Add(hook);
            }
        }
    }

    // add hook to dataset hooks list
    if (metadataHook != null)
    {
        datasetHooks.Add(metadataHook);
    }

    if (dataHook != null)
    {
        datasetHooks.Add(dataHook);
    }

    if (dataDescriptionHook != null)
    {
        datasetHooks.Add(dataDescriptionHook);
    }

    // because of the different folder structure from server and local, we need to change the path
    // e.g. debug -> dcm/BExIS.Modules.Dcm.UI/scripts/.... || server -> dcm/scripts/
    string debugPath = "";

    if (Html.IsDebug())
    {
        debugPath = "BExIS.Modules.Dcm.UI/";
    }

}

@section Information
{
    This is a detailed view on all parts of a dataset. Depending on your
    permissions your are able to view, edit, or download either the
    metadata, the primary data or the data structure.
    <br />
    You may also set permissions for this particular dataset
    <p>
        <a href="~/ddm/Help/Index/#_overview" class="bx-informationLink" title="go to help" target="_blank">More</a>
    </p>

}

@*load sctipts from dcm for the metadata. *@

@section scripts
{
    <script src="@Url.Content("~/Areas/DCM/" + debugPath + "Scripts/Form.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Areas/DCM/" + debugPath + "Scripts/minimap/minimap.js")" type="text/javascript"></script>

}
<link href="@Url.Content("~/Areas/DCM/" + debugPath + "Content/bexis-metadata.css")" rel="stylesheet" type="text/css" />

<link href="@Url.Content("~/Areas/DDM/Content/ddm.css")" rel="stylesheet" type="text/css" />



@if (Model != null && ((Model.IsPublic == true || User.Identity.Name != "") || check_public_metadata == "false"))
{
    <div id="showData">
        <div class="datasetview_header">
            <div class="datasetview_header-title">
                <h1>@Model.Title </h1>
            </div>

           @if (Model.HasEditRight && ViewData["state"].ToString() != "hidden")
           {
            <div class="datasetview_header-toggle" onclick="toogleToEdit()">
                <div class="switch">
                    <input id="bx2-toggle" class="bx2-toggle bx2-toggle-round-flat" type="checkbox">
                    <label for="bx2-toggle"></label>
                </div>
            </div>
            <span class="datasetview_header-toggle-text">switch to edit</span>
           }
        </div>

        @if (ViewData["Message"].ToString() != "")
        {
            <div id="view-error-container">

                <div id="view-error" class="alert alert-danger" role="alert" style="width: 100%;">
                    <span id="view-error-icon" class=" fa fa-exclamation-triangle"></span>
                    @ViewData["Message"].ToString()
                </div>
            </div>
        }

        @if (!Model.LatestVersion && ViewData["state"].ToString() != "hidden")
        {
            <div id="view-warning-container">

                <div id="view-warning" class="alert alert-info" role="alert" style="width: 100%;">
                    <span id="view-warning-icon" class=" fa fa-exclamation-triangle"></span>
                    Attention, this is not the latest version. Click <span class="btn-link" style="cursor: pointer;" onclick="selectVersion(@Model.Id, @Model.LatestVersionNumber)"><b>here</b></span> to change to the latest (public) version.
                </div>
            </div>
        }

        @if (ViewData["state"].ToString() != "hidden")
        {
            <div id="view-header" class="row">
                <div id="view-header-dataset-details" class="col-xs-6 col-md-6 col-lg-6 ">
                    <div class="row">
                        <div class="col-md-6" style="white-space: nowrap;display: flex;">
                            <div>
                                <b>Dataset id:</b> @Model.Id
                                <b style="padding-left: 5px;">Version:</b>
                                @if (ViewData.ModelState.IsValid)
                                {
                                    @Html.DropDownListFor(m => m.VersionSelect, null, Model.LatestVersionNumber + " (Latest internal version)", new { @class = "bx-dropdown", @style = "border:none;" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.VersionSelect, null, "Select version", new { @class = "bx-dropdown", @style = "border:none;" })

                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-2 col-md-2 col-lg-2">
                    @*<div id="preloaderContainer"></div>*@
                </div>

                <div id="view-header-dataset-options" class="col-xs-4 col-md-4 col-lg-4 pull-right text-right">

                    @if (Model.DownloadAccess)
                    {

                        if (Model.DataStructureType.ToLower().Equals("structured"))
                        {
                            <span class="dropdown">
                                <button class="bx-button function" type="button" id="dropdownMenu1" data-toggle="dropdown" title="Download dataset with a selected dataformat for the primary data" aria-haspopup="true" aria-expanded="true">
                                    Download Dataset
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenu1" style="z-index:100000; margin-top:10px;">

                                    @if (@total < 1048576) // hide Excel download for bigger datasets, which exceed the max number of rows in excel
                                    {
                                        <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsm", version = Model.VersionId })">... with Template</a></li>
                                        <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsx", version = Model.VersionId })">... with Excel</a></li>
                                    }
                                    <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/csv", version = Model.VersionId })">... with CSV</a></li>
                                    <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/tsv", version = Model.VersionId })">... with TSV</a></li>
                                    <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/plain", version = Model.VersionId })">... with TXT</a></li>
                                </ul>
                            </span>
                        }
                        else
                        {
                            <a class="bx-button function" href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, version = Model.VersionId, format = "" })">Download Dataset</a>
                        }
                    }
                    else
                    {
                        if (Model.HasRequestRight)
                        {
                            if (Model.RequestAble)
                            {

                                if (Model.RequestExist)
                                {
                                    <button id="sendRequestBt" class="bx-button function bx-disabled" title="Send request to the owner of the dataset for the rights to see and download the primary data." disabled="disabled">Request Pending</button>
                                }
                                else
                                {
                                    @Html.TextArea("intention", new { @class = "bx-input", placeholder = "describe your intention " });
                                    <button id="sendRequestBt" datasetId="@Model.Id" class="bx-button function" title="Send request to the owner of the dataset for the rights to see and download the primary data.">Request Access</button>
                                }
                            }
                            else
                            {
                                if (show_tabs["show_tabs_deactivated"] == "true")
                                {
                                    <button id="sendRequestBt" class="bx-button function bx-disabled" title="Send request to the owner of the dataset for the rights to see and download the primary data. If the function is not available, please contact the administrator." disabled="disabled">Currently not available</button>
                                }
                            }
                        }
                        else
                        {
                            if (show_tabs["show_tabs_deactivated"] == "true")
                            {
                                <button id="sendRequestBt" class="bx-button function bx-disabled" title="You have no right to make requests." disabled="disabled">Currently not available</button>
                            }
                        }
                    }
                </div>
            </div>
        }
        @if (@Model != null)
        {
            <div id="tab-container" style="display:none">
                @if (ViewData.ModelState.IsValid)
                {
                <ul class="nav nav-tabs">
                    <!--load hooks in tab header-->
                    <!--dataset hooks-->
                    @foreach (var hook in datasetHooks)
                    {
                        if (hook.Status != BExIS.UI.Hooks.HookStatus.AccessDenied &&
                        hook.Status != BExIS.UI.Hooks.HookStatus.Disabled)
                        {

                            var baseid = @hook.Name.ToLower();
                            <!--set first element to active-->
                            var active = hook.Name.Equals(activeHook.Name) ? "active" : "";
                            var disabled = hook.Status.Equals(BExIS.UI.Hooks.HookStatus.Disabled) ? "disabled" : "";

                            <li role="presentation" class="@active @disabled">
                                <a href="#@baseid" aria-controls="@baseid" role="tab" data-toggle="tab" onclick="selectTab('@hook.Name.ToLower()')" onmouseover="prefetch('@hook.Name.ToLower()', '@hook.Start', @Model.Id, @Model.Version)">@hook.DisplayName.ToUpper()</a>
                            </li>

                        }
                    }

                    <!--additional hooks-->

                    @foreach (var hook in additionalHooks)
                    {
                        if (hook.Status != BExIS.UI.Hooks.HookStatus.AccessDenied &&
                            hook.Status != BExIS.UI.Hooks.HookStatus.Disabled)
                        {

                            var baseid = @hook.Name.ToLower();
                            var active = hook.Name.Equals(activeHook.Name) ? "active" : "";

                            <!--set first element to active-->
                            var disabled = hook.Status.Equals(BExIS.UI.Hooks.HookStatus.Disabled) ? "disabled" : "";

                            <li role="presentation" class="@active @disabled">
                                <a href="#@baseid" aria-controls="@baseid" role="tab" data-toggle="tab" onclick="selectTab('@hook.Name.ToLower()')" onmouseover="prefetch('@hook.Name.ToLower()', '@hook.Start', @Model.Id, @Model.Version)">@hook.DisplayName.ToUpper()</a>
                            </li>

                        }
                    }
                </ul>

                <!--load hooks in tab content-->
                <!--dataset hooks-->

                <div class="tab-content">

                    @foreach (var hook in datasetHooks)
                    {
                        var baseid = @hook.Name.ToLower();
                        <!--set first element to active-->
                        var active = hook.Name.Equals(activeHook.Name) ? "active" : "";

                        <div role="tabpanel" class="tab-pane @active" id="@baseid"></div>
                    }

                    <!--additional hooks-->
                    @foreach (var hook in additionalHooks)
                    {
                        var baseid = @hook.Name.ToLower();
                        <!--set first element to active-->
                        var active = hook.Name.Equals(activeHook.Name) ? "active" : "";

                        <div role="tabpanel" class="tab-pane @active" id="@baseid"></div>
                    }
                </div>

                }
                else
                {
                @Html.ValidationSummary(true);
                }
            </div>
        }
    </div>
    <script type="text/javascript">

	function grid_subjects_onDataBound() {
		addTooltips();
		resetAllTelerikIconTitles();

		$("#grid_subjects tbody input:checkbox").click(function () {
			if ($(this).is(':checked')) {
				$.post('@Url.Action("AddRightToEntityPermission", "UserPermissions", new { area = "sam" })',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			} else {
				$.post('@Url.Action("RemoveRightFromEntityPermission", "UserPermissions", new { area = "sam" })',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			}
		});
	}

	$(document).ready(function () {

		$("#preloaderContainer").preloader(20, "Loading...");
        //load active hook
        console.log("document ready start prefetch")
        initfetch('@activeHook.Name', '@activeHook.Start',@Model.Id,@Model.Version)
        console.log("document ready end prefetch")

		$("#preloaderContainer").removePreloader();

	});

	function existsRightType(rights, rightType) {
		if (jQuery.inArray(rightType, rights) != -1) {
			return true;
		}
		else {
			return false;
		}
	}

    function initfetch(hook, action, id, version) {
        var url = window.location.origin + "/" + action;

        var loaded = $("#" + hook).attr("loaded");

        if (loaded == undefined) {

            console.log("load content");
            // set preloader
            $("#" + hook).preloader(20, "Loading...");

            $.get(url, { id, version }, function (data) {

                const tabcontainer = document.getElementById('tab-container');
                tabcontainer.style.display = 'block'; // Show the div

                $("#" + hook).html(data)
                // remove preloader
                $("#" + hook).attr("loaded", "true");

            });
        }

    }

    //tab strip
    function prefetch(hook,action,id,version)
    {
        var url = window.location.origin+"/" + action;

        var loaded = $("#" + hook).attr("loaded");

        if (loaded == undefined) {

            console.log("load content");
            // set preloader
            $("#" + hook).preloader(20, "Loading...");

            $.get(url, { id, version }, function (data) {

                $("#" + hook).html(data)
                // remove preloader
                $("#" + hook).attr("loaded", "true");
            });
        }

     }

    // calls this function to check if metadata tab is active.
    // if true = active minimap if not remove minimap
     function selectTab(hook) {

        // special case for metadata, load minimap if hook is active
        if (hook == "metadata") {
            setTimeout(function () {
                bindMinimap(true);

                $(window).resize(function () {

                    setTimeout(function () {
                        //alert("r");
                        bindMinimap();
                    }, 120);
                });

            }, 120);
        }
        else {
            $(".miniregion").remove();
            $(".minimap").remove();

            $(window).off('resize');
         }

    }

	function download(id, format) {

		$("#preloaderContainer").preloader(20, "Preparing zip file...");

		window.location = '@Url.Action("DownloadZip", "Data", new { id = @Model.Id })';

		$("#preloaderContainer").removePreloader();

	}

	$("#sendRequestBt").click(function() {

        var id = $(this).attr("datasetId");

        var intention = $("#intention").val();

	    $.post("/DDM/RequestsSend/Send", { id, intention }, function(data) {
	        if (data === true) {
	            $("#sendRequestBt").prop("disabled", "disabled");
	            $("#sendRequestBt").addClass("bx-disabled", "bx-disabled");
                $("#sendRequestBt").text("Request has been made.");

                $("#intention").remove();
	        }
	    });

    });

    $("#VersionSelect").on('change', function () {
        console.log("change url");
        var versionNumber = $("#VersionSelect").val();
        selectVersion(@Model.Id, versionNumber);
    });

   function selectVersion(datasetId, versionNumber) {
        var redirectURL = '@Url.Action("Show", "Data")';
        window.location.href = redirectURL + "/" + datasetId + "?version=" + versionNumber;
        }

   function toogleToEdit() {

       window.location.href = "/dcm/edit?id=@Model.Id";

    }
    </script>

}
else if (Model.IsPublic == false)
{
    <div> <h2>Dataset is not public.</h2></div>
}
else
{
    @Html.ValidationSummary(true);
}



<style>
    a:hover, a {
        text-decoration: none;
    }

    .datasetview_header {
        width: 100%;
        min-height: 40px;
    }

    .datasetview_header-title {
        float: left;
    }

    .datasetview_header-title h1 {
        margin-top: 2px;
    }
    .datasetview_header-toggle-text {
        padding: 5px;
        float: right;
        color: rgb(98, 98, 98);
    }
    .datasetview_header-toggle {
        padding: 2px;
        float: right;
    }

    .tab-pane {
        min-height: 70px;
    }
</style>