@model BExIS.Modules.Ddm.UI.Models.ShowDataModel

@using Telerik.Web.Mvc.UI;
@using Vaiona.Web.Mvc.Modularity

@section Information
{
	This is a detailed view on all parts of a dataset. Depending on your
	permissions your are able to view, edit, or download either the
	metadata, the primary data or the data structure.<br/>
	You may also set permissions for this particular dataset
   <p>
	<a href="~/ddm/Help/Index/#_overview" class="bx-informationLink" title="go to help" target="_blank">More</a>
</p>

}

@{
	@*<script src="@Url.Content("~/Scripts/DCM/Form.js")" type="text/javascript"></script>*@
}



<div>
	<table>
		<tr>
			<td>
				<h2>@Model.Title ( @Model.Id )</h2>
			</td>
			<td>
				<div id="preloaderContainer"/>
			</td>
            <td style="text-align: -webkit-right;">

                @if (Model.DownloadAccess)
                {

                    if (Model.DataStructureType.ToLower().Equals("structured"))
                    {
                        <span class="dropdown">
                            <button class="bx-button function" type="button" id="dropdownMenu1" data-toggle="dropdown" title="Download dataset with a selected dataformat for the primary data" aria-haspopup="true" aria-expanded="true">
                                Download Dataset
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1" style="z-index:100000; margin-top:10px;">
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsm" })">... with Template</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "application/xlsx" })">... with Excel</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/csv" })">... with CSV</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/tsv" })">... with TSV</a></li>
                                <li><a href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "text/plain" })">... with TXT</a></li>
                            </ul>
                        </span>
                    }
                    else
                    {
                        <a class="bx-button function" href="@Url.Action("DownloadZip", "Data", new { id = @Model.Id, format = "" })">Download</a>
                    }
                }
                else
                {
                    <button class="bx-button function bx-disabled" disabled="disabled">Download</button>
                }
            </td>
		</tr>
	</table>
</div>

@if(@Model != null)
{
	if (ViewData.ModelState.IsValid)
	{

		@(Html.Telerik().TabStrip()
			  .Name("ShowDataTabStrip")
			  .SelectedIndex(0)
			  .Items(tabs =>
			  {

				  //ToDo Recator Modularity -> load metadata from from dcm

				  tabs.Add()
					  .Text("Metadata")
					  .LoadContentFrom("ShowMetadata", "Data", new {area = "ddm", entityId = @Model.Id, title = @Model.Title, metadatastructureId = @Model.MetadataStructureId, datastructureId = @Model.DataStructureId, researchplanId = @Model.ResearchPlanId, sessionKeyForMetadata = "ShowDataMetadata"})
					  .HtmlAttributes(new {id = "metadata"})
					  .Enabled(false);

				  tabs.Add()
					  .Text("Primary Data")
					  .LoadContentFrom("ShowPrimaryData", "Data", new {area = "ddm", datasetID = @Model.Id})
					  .Enabled(@Model.ViewAccess)
					  .HtmlAttributes(new {id = "primarydata"})
					  .Enabled(false);

				  tabs.Add()
					  .Text("Data Structure")
					  .LoadContentFrom("ShowPreviewDataStructure", "Data", new {area = "ddm", datasetID = @Model.Id})
					  .HtmlAttributes(new {id = "datastructure"})
					  .Enabled(false);


				  tabs.Add()
					  .Text("Dataset Permissions")
					  .LoadContentFrom("DatasetPermissions", "Data", new { area = "ddm", datasetId = @Model.Id })
					  .Enabled(false)
					  .HtmlAttributes(new { id = "datapermissions" });


				  tabs.Add()
					  .Text("Publish")
					  //.Content(@Html.Render("dim", "Submission", "getPublishDataPartialView", new RouteValueDictionary { { "datasetid", @Model.Id } }).ToHtmlString())
						.LoadContentFrom("getPublishDataPartialView", "Submission", new { area = "dim", datasetId = @Model.Id })
						.Enabled(false)
						.HtmlAttributes(new { id = "prepare" });


			  })
			  .ClientEvents(e => e.OnSelect("OnSelectShowDataTabStrip")))
	}
	else
	{
		@Html.ValidationSummary(true);
	}
}


<script type="text/javascript">
	function grid_subjects_onDataBound() {
		addTooltips();
		resetAllTelerikIconTitles();

		$("#grid_subjects tbody input:checkbox").click(function () {
			if ($(this).is(':checked')) {
				$.post('@Url.Action("AddRightToEntityPermission", "UserPermissions", new { area = "sam"})',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			} else {
				$.post('@Url.Action("RemoveRightFromEntityPermission", "UserPermissions", new { area = "sam" })',
					{ SubjectId: $(this).data('subjectid'), EntityId: $(this).data('entityid'), InstanceId: $(this).data('instanceid'), RightType: $(this).data('righttype') },
					function () {
						$("#grid_subjects .t-refresh").trigger('click');
					});
			}
		});
	}

	$("#MetadataEditor").ready(function() {


	});

	$(document).ready(function () {

		$("#preloaderContainer").preloader(20, "Loading...");
		resetAllTelerikIconTitles();

		$(document).bind("MetadataFormIsReady", function () {
			//alert("m is ready");
			var viewAccess = '@Model.ViewAccess';
			var grantAccess = '@Model.GrantAccess';

			var tabStrip = $(".t-tabstrip");
			//console.log(tabStrip);
			//console.log(viewAccess);
			//console.log(grantAccess);


			$("li#datastructure").removeClass("t-state-disabled");
			//console.log($(tabStrip).find("li #datastructure"));

			if (viewAccess === "True") {
				$("li#primarydata").removeClass("t-state-disabled");
				$("li#prepare").removeClass("t-state-disabled");
			}

			if (grantAccess === "True") {
				$(tabStrip).find("li#datapermissions").removeClass("t-state-disabled");
			}

			//console.log($("li", tabStrip.element));
			var items = $("li", tabStrip.element);
			//console.log(items);
			//tabStrip.enable(items);

			$("#preloaderContainer").removePreloader();
		});

	});


	function existsRightType(rights, rightType) {
		if (jQuery.inArray(rightType, rights) != -1) {
			return true;
		}
		else {
			return false;
		}
	}

	function OnSelectShowDataTabStrip(e) {
		if (e.item.id == "metadata") {

			setTimeout(function () {
				bindMinimap(true);

				$(window).resize(function () {

						setTimeout(function () {
							//alert("r");
							bindMinimap();
						}, 120);
					});

			}, 120);


		}
		else {
			$(".miniregion").remove();
			$(".minimap").remove();

			$(window).off('resize');
		}

		if (e.item.id == "prepare") {

			var tabStrip = $("#ShowDataTabStrip").data("tTabStrip");
			tabStrip.reload($("#" + e.item.id));
		}
	}

	function download(id, format) {


		$("#preloaderContainer").preloader(20, "Preparing zip file...");

		window.location = '@Url.Action("DownloadZip", "Data", new { id = @Model.Id})';

		$("#preloaderContainer").removePreloader();

	}

</script>