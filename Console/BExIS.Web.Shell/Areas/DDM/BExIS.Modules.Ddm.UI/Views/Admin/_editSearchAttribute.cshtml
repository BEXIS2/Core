@model SearchAttributeViewModel

@using BExIS.Utils.Models;
@using BExIS.Modules.Ddm.UI.Models;

@{

    string Title = "New Search Attribute";

    if (Model.displayName != null)
    {
        Title = Model.displayName;
    }

    // enums to list
    // metadatanodes to list

    List<string> SearchComponentBaseType = new List<string>();
    foreach (SearchComponentBaseType ms in Enum.GetValues(typeof(SearchComponentBaseType)))
    {
        SearchComponentBaseType.Add(ms.ToString());
    }

    List<string> DataType = new List<string>();
    foreach (TypeCode ms in Enum.GetValues(typeof(TypeCode)))
    {
        DataType.Add(ms.ToString());
    }

    //for properties

    List<string> Directions = new List<string>();
    foreach (Direction ms in Enum.GetValues(typeof(Direction)))
    {
        Directions.Add(ms.ToString());
    }

    List<string> UiComponents = new List<string>();
    foreach (UiComponent ms in Enum.GetValues(typeof(UiComponent)))
    {
        UiComponents.Add(ms.ToString());
    }

    List<string> AggregationTypes = new List<string>();
    foreach (AggregationType ms in Enum.GetValues(typeof(AggregationType)))
    {
        AggregationTypes.Add(ms.ToString());
    }

    List<SearchMetadataNode> metadataNodes = new List<SearchMetadataNode>();
    if (Session["metadatNodes"] != null)
    {
        metadataNodes = (List<SearchMetadataNode>)Session["metadatNodes"];
    }

    List<string> placeholder = new List<string>();
    if (ViewData["placeholder"] != null)
    {
        placeholder = (List<string>)ViewData["placeholder"];
    }

}

@*<div class="bx-title">@Title</div>*@

@using (Ajax.BeginForm("Save", "Admin", new AjaxOptions
{
    HttpMethod = "Post",
    UpdateTargetId = "searchAttributeForm",
    OnSuccess = "OnSuccess",
    OnFailure = "OnFailure"
}))
{

    <div id="searchAttributeForm" class="bx-content" style="height:410px; overflow:auto">
        @{
            <table>
                <tr>
                    <td style="width:250px;"><h3>General</h3></td>
                </tr>
                <tr>
                    <td>
                        <label>Id</label>
                        @(Html.HiddenFor(m => m.id))
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.id, new { @disabled = "disabled" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.displayName))<span class="bx bx-required" title="Required">
                    </td>
                    <td>
                        @(Html.TextBoxFor(m => m.displayName, new { @class = "t-input", title = "Display name of the item in the search user interface." }))
                        @Html.ValidationMessageFor(m => m.displayName)
                    </td>
                </tr>
                @*<tr>
                        <td>
                             @(Html.LabelFor(m => m.sourceName))<span class="bx bx-required" title="Required">
                        </td>
                        <td>
                            @(Html.TextBoxFor(m => m.sourceName, new { @class = "t-input", title="Name of the field in the lucene index." }))

                             @Html.ValidationMessageFor(m => m.sourceName)
                        </td>
                    </tr>*@
                <tr>
                    <td style="vertical-align:top;">
                        @(Html.LabelFor(m => m.metadataNames))<span class="bx bx-required" title="Required">
                    </td>
                    <td class="listOfNodes">

                        <div id="metadataNodes">

                            @if (Model.metadataNames != null && Model.metadataNames.Count > 0)
                            {
                                foreach (var xpath in Model.metadataNames)
                                {
                                    Html.RenderPartial("_metadataNode", xpath);
                                }
                            }
                        </div>
                    </td>
                    <td style="vertical-align:bottom;">
                        <div class="vcenter" style="width:55px;">
                            @Html.ActionLink(" ", "AddMetadataNode", null, new { id = "addNode", @class = "bx-add bx-function", title = "Corresponding metadata node to be used for the Lucene index." })
                            @Html.ValidationMessageFor(m => m.metadataNames)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.headerItem))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.headerItem, new { title = "Tick if this item should be available as a category (e.g. as a grid column)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.defaultHeaderItem))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.defaultHeaderItem, new { title = "Tick if the header item should be visible upon page load." })
                    </td>
                </tr>

                <tr>
                    <td>
                        @(Html.LabelFor(m => m.placeholder))
                    </td>

                    <td>
                        @Html.DropDownListFor(m => m.placeholder, new SelectList(placeholder, Model.placeholder), "Please select")
                    </td>
                </tr>

                <tr><td><h3>Type</h3></td></tr>

                <tr>
                    <td>
                        @(Html.LabelFor(m => m.searchType))<span class="bx bx-required">
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.searchType, new SelectList(SearchComponentBaseType, Model.searchType), "Please select")
                        <label title="Search pattern to be used for this item.">?</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.dataType))<span class="bx bx-required" title="Required">
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.dataType, new SelectList(DataType, Model.dataType), "Please select", new { title = "Data type to be indexed." })
                    </td>
                </tr>
                <tr>
                    <td><h3>Index Parameters</h3></td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.store))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.store, new { title = "Tick to store the entire item value in addition to the index." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.multiValue))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.multiValue, new { title = "Tick if this item contains multiple values per field (e.g. Name A; Name B; Name C)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.analysed))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.analysed, new { title = "Tick if this item should be analyzed for the index (default)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.norm))
                    </td>
                    <td>
                        @Html.CheckBoxFor(m => m.norm)
                        <label title="....">?</label>
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.boost))
                    </td>
                    <td>
                        @Html.TextBoxFor(m => m.boost, new { type = "number", min = "0.0", max = "10.0", title = "Specify the priority of this item within the search index (10=highest priority)." })
                    </td>
                </tr>
                <tr>
                    <td><h3>Property Parameters</h3></td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.uiComponent))
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.uiComponent, new SelectList(UiComponents, Model.uiComponent), new { title = "Choose a UI component Type according to the number of options (1-3  = item, 3-15 = list, >15= range)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.aggregationType))
                    </td>
                    <td>

                        @Html.DropDownListFor(m => m.aggregationType, new SelectList(AggregationTypes, Model.aggregationType), new { title = "Choose a selection type based how many choices should be allowed (single, multiple)." })
                    </td>
                </tr>
                <tr>
                    <td>
                        @(Html.LabelFor(m => m.direction))
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.direction, new SelectList(Directions, Model.direction), new { title = "Default sort direction for this item (ascending, descending)." })
                    </td>
                </tr>
                @*<tr>
                        <td>
                            @(Html.LabelFor(m => m.dateFormat))
                        </td>
                        <td>
                            bgc:format
                        </td>
                        <td>
                            metadata node providing the date format
                        </td>
                    </tr>*@
            </table>
        }
    </div>

    <div class="bx-footer right">
        <button type="submit" value="Save" name="submit" class="bx-button action">Save</button>
        <button value="c" name="cancel" class="bx-button action" onclick="OnCancel()">Cancel</button>
    </div>
}

<script type="text/javascript">

    var run = false;
    $("#addNode").unbind().click(function () {

            $.ajax({
                url: this.href,
                cache: false,
                success: function (html) { $("#metadataNodes").append(html); }
            });

        return false;
    });

    $("a.removeMetadataNode").live("click", function () {
        $(this).parents("div.metadataNode:first").remove();
        return false;
    });

    function OnCancel() {
        var window = $('#EditSearchAttribute').data('tWindow');
        window.close();
    }

    function OnSuccess() {

        var window = $('#EditSearchAttribute').data('tWindow');
        window.close();

        @*$.post('@Url.Action("SearchDesigner", "Admin", new RouteValueDictionary { { "area", "ddm" } })', function (response) {
            $("body").html(response);
        })*@
    }

    function OnFailure(response) {
        alert("failed");
    }
</script>

<style type="text/css">

    #searchAttributeForm {
        padding: 5px;
        background-color: white;
    }

        #searchAttributeForm div {
            padding-left: 0px;
        }

        #searchAttributeForm table,
        #searchAttributeForm td {
            /*border:none;*/
        }

    .searchAttributePart table, .searchAttributePart td, .searchAttributePart tr {
        border: none;
    }
</style>